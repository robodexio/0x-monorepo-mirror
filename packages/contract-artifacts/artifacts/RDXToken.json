{
	"schemaVersion": "2.0.0",
	"contractName": "RDXToken",
	"compilerOutput": {
		"abi": [
			{
				"constant": true,
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"name": "",
						"type": "string"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "spender",
						"type": "address"
					},
					{
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "from",
						"type": "address"
					},
					{
						"name": "to",
						"type": "address"
					},
					{
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "decimals",
				"outputs": [
					{
						"name": "",
						"type": "uint8"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "spender",
						"type": "address"
					},
					{
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "increaseAllowance",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "positionId",
						"type": "bytes32"
					}
				],
				"name": "getPositionInfo",
				"outputs": [
					{
						"name": "baseToken",
						"type": "address"
					},
					{
						"name": "quoteToken",
						"type": "address"
					},
					{
						"name": "makerAddress",
						"type": "address"
					},
					{
						"name": "takerAddress",
						"type": "address"
					},
					{
						"name": "tradeType",
						"type": "uint8"
					},
					{
						"name": "amount",
						"type": "int256"
					},
					{
						"name": "margin",
						"type": "uint256"
					},
					{
						"name": "openPrice",
						"type": "uint256"
					},
					{
						"name": "closePrice",
						"type": "uint256"
					},
					{
						"name": "filled",
						"type": "uint256"
					},
					{
						"name": "timestamp",
						"type": "uint256"
					},
					{
						"name": "state",
						"type": "uint8"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "owner",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"name": "",
						"type": "string"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "spender",
						"type": "address"
					},
					{
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "decreaseAllowance",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "to",
						"type": "address"
					},
					{
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "transfer",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "owner",
						"type": "address"
					},
					{
						"name": "spender",
						"type": "address"
					}
				],
				"name": "allowance",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "makerAssetData",
						"type": "bytes"
					},
					{
						"name": "takerAssetData",
						"type": "bytes"
					},
					{
						"name": "dexData",
						"type": "bytes"
					}
				],
				"name": "peddle",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"name": "positionId",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"name": "baseToken",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "quoteToken",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "makerAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "takerAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "tradeType",
						"type": "uint8"
					},
					{
						"indexed": false,
						"name": "amount",
						"type": "int256"
					},
					{
						"indexed": false,
						"name": "margin",
						"type": "uint256"
					},
					{
						"indexed": false,
						"name": "openPrice",
						"type": "uint256"
					},
					{
						"indexed": false,
						"name": "closePrice",
						"type": "uint256"
					}
				],
				"name": "PositionOpened",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"name": "positionId",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "amount",
						"type": "int256"
					}
				],
				"name": "PositionClosed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			}
		],
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x608060408181526b033b2e3c9fd0803ce800000060008181553380825260016020908152938220839055918452909290917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a342621baf8001600655611e418061006b6000396000f3006080604052600436106100c45763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100c9578063095ea7b31461015357806318160ddd1461019857806323b872dd146101bf578063313ce567146101f657806339509351146102215780635f458e511461025257806370a082311461030957806395d89b4114610337578063a457c2d71461034c578063a9059cbb1461037d578063dd62ed3e146103ae578063f4970c90146103e2575b600080fd5b3480156100d557600080fd5b506100de61041a565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610118578181015183820152602001610100565b50505050905090810190601f1680156101455780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015f57600080fd5b5061018473ffffffffffffffffffffffffffffffffffffffff60043516602435610451565b604080519115158252519081900360200190f35b3480156101a457600080fd5b506101ad6104c4565b60408051918252519081900360200190f35b3480156101cb57600080fd5b5061018473ffffffffffffffffffffffffffffffffffffffff600435811690602435166044356104ca565b34801561020257600080fd5b5061020b6104ec565b6040805160ff9092168252519081900360200190f35b34801561022d57600080fd5b5061018473ffffffffffffffffffffffffffffffffffffffff600435166024356104f1565b34801561025e57600080fd5b5061026a600435610529565b6040805173ffffffffffffffffffffffffffffffffffffffff808f1682528d811660208301528c811692820192909252908a166060820152608081018960018111156102b257fe5b60ff1681526020018881526020018781526020018681526020018581526020018481526020018381526020018260038111156102ea57fe5b60ff1681526020019c5050505050505050505050505060405180910390f35b34801561031557600080fd5b506101ad73ffffffffffffffffffffffffffffffffffffffff600435166106ab565b34801561034357600080fd5b506100de6106d3565b34801561035857600080fd5b5061018473ffffffffffffffffffffffffffffffffffffffff6004351660243561070a565b34801561038957600080fd5b5061018473ffffffffffffffffffffffffffffffffffffffff60043516602435610739565b3480156103ba57600080fd5b506101ad73ffffffffffffffffffffffffffffffffffffffff60043581169060243516610746565b3480156103ee57600080fd5b50610184602460048035828101929082013591813580830192908201359160443591820191013561077e565b60408051808201909152601181527f30782050726f746f636f6c20546f6b656e000000000000000000000000000000602082015281565b33600081815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60005490565b60006104d7843384610a33565b6104e2848484610b30565b5060019392505050565b601281565b600073ffffffffffffffffffffffffffffffffffffffff8316151561051557600080fd5b610520338484610c45565b50600192915050565b600080600080600080600080600080600080610543611daa565b60008e815260036020818152604092839020835161018081018552815473ffffffffffffffffffffffffffffffffffffffff90811682526001808401548216948301949094526002830154811695820195909552928101549384166060840152919260808401917401000000000000000000000000000000000000000090910460ff16908111156105d057fe5b60018111156105db57fe5b815260048201546020820152600582015460408201526006820154606082015260078201546080820152600882015460a0820152600982015460c0820152600a82015460e09091019060ff16600381111561063257fe5b600381111561063d57fe5b81525050905080600001519c5080602001519b5080604001519a5080606001519950806080015198508060a0015197508060c0015196508060e00151955080610100015194508061012001519350806101400151925080610160015191505091939597999b5091939597999b565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205490565b60408051808201909152600381527f5244580000000000000000000000000000000000000000000000000000000000602082015281565b600073ffffffffffffffffffffffffffffffffffffffff8316151561072e57600080fd5b610520338484610a33565b6000610520338484610b30565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260026020908152604080832093909416825291909152205490565b6000610788611daa565b610790611daa565b6000806000806107cf8d8d8080601f01602080910402602001604051908101604052809392919081815260200183838082843750610c8f945050505050565b955061080a8b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843750610c8f945050505050565b945061081586610f49565b935061082085610f49565b925061082b84611177565b15915061083783611177565b1590508180156108445750805b156108ec5761086186600001518760400151308960c001516111a4565b61087985600001518660400151308860c001516111a4565b6108af86600001518760200151886040015189606001518a608001518b60a001518c60c001518d60e001518e61010001516112c4565b506108e6856000015186602001518760400151886060015189608001518a60a001518b60c001518c60e001518d61010001516112c4565b50610a23565b801561098a5761090a85600001518660400151308860c001516111a4565b610940856000015186602001518760400151886060015189608001518a60a001518b60c001518c60e001518d61010001516112c4565b5061098584876040015187604001518c8c8080601f0160208091040260200160405190810160405280939291908181526020018383808284375061186f945050505050565b610a23565b8115610a23576109a886600001518760400151308960c001516111a4565b6109de86600001518760200151886040015189606001518a608001518b60a001518c60c001518d60e001518e61010001516112c4565b50610a2383866040015188604001518c8c8080601f0160208091040260200160405190810160405280939291908181526020018383808284375061186f945050505050565b5050505050509695505050505050565b600081118015610a75575073ffffffffffffffffffffffffffffffffffffffff8084166000908152600260209081526040808320938616835292905220548111155b1515610a8057600080fd5b73ffffffffffffffffffffffffffffffffffffffff808416600090815260026020908152604080832093861683529290522054610abd9082611b20565b73ffffffffffffffffffffffffffffffffffffffff84811660008181526002602090815260408083209488168084529482529182902085905581519485529051929391927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b600081118015610b65575073ffffffffffffffffffffffffffffffffffffffff83166000908152600160205260409020548111155b1515610b7057600080fd5b73ffffffffffffffffffffffffffffffffffffffff8316600090815260016020526040902054610ba09082611b20565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152600160205260408082209390935590841681522054610bdc9082611b97565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008111610c5257600080fd5b73ffffffffffffffffffffffffffffffffffffffff808416600090815260026020908152604080832093861683529290522054610abd9082611b97565b610c97611daa565b6000806000806000806000806000808b51610140141515610d1957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f494e56414c49445f41535345545f444154415f4c454e47544800000000000000604482015290519081900360640190fd5b610d2a8c600063ffffffff611c1216565b9950610d3d8c602063ffffffff611c1216565b9850610d508c604063ffffffff611c1216565b9750610d638c606063ffffffff611c1216565b965060007f0100000000000000000000000000000000000000000000000000000000000000028c609f815181101515610d9857fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191611610e11576000610e14565b60015b9550610e278c60a063ffffffff611cce16565b9450610e3a8c60c063ffffffff611d7416565b9350610e4d8c60e063ffffffff611d7416565b9250610e618c61010063ffffffff611d7416565b9150610e758c61012063ffffffff611d7416565b9050610180604051908101604052808b73ffffffffffffffffffffffffffffffffffffffff1681526020018a73ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff168152602001876001811115610f0057fe5b81526020018681526020018581526020018481526020018381526020016000815260200182815260200160006003811115610f3757fe5b90529c9b505050505050505050505050565b60006060826000015183602001518460400151856060015186608001518760a00151886101400151604051602001808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140184600181111561108857fe5b60ff167f01000000000000000000000000000000000000000000000000000000000000000281526001018381526020018281526020019750505050505050506040516020818303038152906040529050806040518082805190602001908083835b6020831061112657805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016110e9565b5181516020939093036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018019909116921691909117905260405192018290039091209695505050505050565b600060016000838152600360208190526040909120600a015460ff169081111561119d57fe5b1492915050565b604080517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301528481166024830152604482018490529151918616916323b872dd916064808201926020929091908290030181600087803b15801561122557600080fd5b505af1158015611239573d6000803e3d6000fd5b505050506040513d602081101561124f57600080fd5b505115156112be57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f554e41424c455f544f5f5452414e534645525f45524332305f544f4b454e0000604482015290519081900360640190fd5b50505050565b60006112ce611daa565b73ffffffffffffffffffffffffffffffffffffffff8b1615801590611308575073ffffffffffffffffffffffffffffffffffffffff8a1615155b801561134057508973ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff1614155b15156113ad57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332305f544f4b454e5f4144445245535345535f494e56414c4944000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8916158015906113e7575073ffffffffffffffffffffffffffffffffffffffff881615155b801561141f57508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614155b151561148c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f5452414445525f4144445245535345535f494e56414c49440000000000000000604482015290519081900360640190fd5b600087600181111561149a57fe5b14806114b1575060018760018111156114af57fe5b145b151561151e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f54524144455f545950455f494e56414c49440000000000000000000000000000604482015290519081900360640190fd5b610180604051908101604052808c73ffffffffffffffffffffffffffffffffffffffff1681526020018b73ffffffffffffffffffffffffffffffffffffffff1681526020018a73ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018860018111156115a757fe5b815260200187815260200186815260200185815260200184815260200160008152602001428152602001600060038111156115de57fe5b905290506115eb81610f49565b6000818152600360205260409020600901549092501561166c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f504f534954494f4e5f414c52454144595f4f50454e4544000000000000000000604482015290519081900360640190fd5b600082815260036020818152604092839020845181547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff928316178355928601516001808401805486169284169290921790915594860151600283018054851691831691909117905560608601519382018054909316931692909217808255608085015185949092917fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16907401000000000000000000000000000000000000000090849081111561175257fe5b021790555060a0820151600482015560c0820151600582015560e08201516006820155610100820151600782015561012082015160088201556101408201516009820155610160820151600a820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660018360038111156117d257fe5b02179055509050508660018111156117e657fe5b6040805184815273ffffffffffffffffffffffffffffffffffffffff8e811660208301528d811682840152606082018a90526080820189905260a0820188905260c082018790529151828c16928d16917f9081af4372fd7c22014980982f4c3a122105334ce30a7f809691cb380f8f8965919081900360e00190a4509998505050505050505050565b6000848152600360205260408120906001600a83015460ff16600381111561189357fe5b146118ff57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f504f534954494f4e5f49535f4e4f545f4f50454e454400000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff851615801590611939575073ffffffffffffffffffffffffffffffffffffffff841615155b801561197157508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614155b15156119de57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f5452414445525f4144445245535345535f494e56414c49440000000000000000604482015290519081900360640190fd5b6119e783611d80565b90506000600383015474010000000000000000000000000000000000000000900460ff166001811115611a1657fe5b1415611a2157611ac0565b6001600383015474010000000000000000000000000000000000000000900460ff166001811115611a4e57fe5b1415611a5957611ac0565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f504f534954494f4e5f54524144455f545950455f494e56414c49440000000000604482015290519081900360640190fd5b6040805187815260208101839052815173ffffffffffffffffffffffffffffffffffffffff80881693908916927fcd2ebf70bdf4dec83bc8bb4634d2077dd87b0a3aa452e45d4599b9114a1960f6929081900390910190a3505050505050565b600082821115611b9157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f55494e543235365f554e444552464c4f57000000000000000000000000000000604482015290519081900360640190fd5b50900390565b600082820183811015611c0b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f55494e543235365f4f564552464c4f5700000000000000000000000000000000604482015290519081900360640190fd5b9392505050565b600081601401835110151515611caf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f475245415445525f4f525f455155414c5f544f5f32305f4c454e4754485f524560448201527f5155495245440000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b50016014015173ffffffffffffffffffffffffffffffffffffffff1690565b600081602001835110151515611d6b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f475245415445525f4f525f455155414c5f544f5f33325f4c454e4754485f524560448201527f5155495245440000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b50016020015190565b6000611c0b8383611cce565b60006020825110611da157611d9c82600063ffffffff611cce16565b611da4565b60005b92915050565b604080516101808101825260008082526020820181905291810182905260608101829052906080820190815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006003811115611e1057fe5b9052905600a165627a7a72305820e603c5b620b424e741d10308b830df48727f3d3028e77142ab6da0bb1b86b6d80029",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH12 0x33B2E3C9FD0803CE8000000 PUSH1 0x0 DUP2 DUP2 SSTORE CALLER DUP1 DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE SWAP4 DUP3 KECCAK256 DUP4 SWAP1 SSTORE SWAP2 DUP5 MSTORE SWAP1 SWAP3 SWAP1 SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG3 TIMESTAMP PUSH3 0x1BAF80 ADD PUSH1 0x6 SSTORE PUSH2 0x1E41 DUP1 PUSH2 0x6B PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC4 JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x6FDDE03 DUP2 EQ PUSH2 0xC9 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x153 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x198 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1BF JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x1F6 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x221 JUMPI DUP1 PUSH4 0x5F458E51 EQ PUSH2 0x252 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x309 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x337 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x34C JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x37D JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x3AE JUMPI DUP1 PUSH4 0xF4970C90 EQ PUSH2 0x3E2 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDE PUSH2 0x41A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x118 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x100 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x145 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x15F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x184 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x451 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1AD PUSH2 0x4C4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x184 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD DUP2 AND SWAP1 PUSH1 0x24 CALLDATALOAD AND PUSH1 0x44 CALLDATALOAD PUSH2 0x4CA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x202 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20B PUSH2 0x4EC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x184 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x4F1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x25E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26A PUSH1 0x4 CALLDATALOAD PUSH2 0x529 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP16 AND DUP3 MSTORE DUP14 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP13 DUP2 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP11 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP2 ADD DUP10 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x2B2 JUMPI INVALID JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x2EA JUMPI INVALID JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP13 POP POP POP POP POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x315 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1AD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH2 0x6AB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x343 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDE PUSH2 0x6D3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x358 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x184 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x70A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x389 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x184 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x739 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1AD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD DUP2 AND SWAP1 PUSH1 0x24 CALLDATALOAD AND PUSH2 0x746 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x184 PUSH1 0x24 PUSH1 0x4 DUP1 CALLDATALOAD DUP3 DUP2 ADD SWAP3 SWAP1 DUP3 ADD CALLDATALOAD SWAP2 DUP2 CALLDATALOAD DUP1 DUP4 ADD SWAP3 SWAP1 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0x44 CALLDATALOAD SWAP2 DUP3 ADD SWAP2 ADD CALLDATALOAD PUSH2 0x77E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x11 DUP2 MSTORE PUSH32 0x30782050726F746F636F6C20546F6B656E000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP7 SWAP1 SSTORE DUP2 MLOAD DUP7 DUP2 MSTORE SWAP2 MLOAD SWAP4 SWAP5 SWAP1 SWAP4 SWAP1 SWAP3 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP3 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4D7 DUP5 CALLER DUP5 PUSH2 0xA33 JUMP JUMPDEST PUSH2 0x4E2 DUP5 DUP5 DUP5 PUSH2 0xB30 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x12 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND ISZERO ISZERO PUSH2 0x515 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x520 CALLER DUP5 DUP5 PUSH2 0xC45 JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x543 PUSH2 0x1DAA JUMP JUMPDEST PUSH1 0x0 DUP15 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP3 DUP4 SWAP1 KECCAK256 DUP4 MLOAD PUSH2 0x180 DUP2 ADD DUP6 MSTORE DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x1 DUP1 DUP5 ADD SLOAD DUP3 AND SWAP5 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x2 DUP4 ADD SLOAD DUP2 AND SWAP6 DUP3 ADD SWAP6 SWAP1 SWAP6 MSTORE SWAP3 DUP2 ADD SLOAD SWAP4 DUP5 AND PUSH1 0x60 DUP5 ADD MSTORE SWAP2 SWAP3 PUSH1 0x80 DUP5 ADD SWAP2 PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP2 DIV PUSH1 0xFF AND SWAP1 DUP2 GT ISZERO PUSH2 0x5D0 JUMPI INVALID JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x5DB JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x5 DUP3 ADD SLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x6 DUP3 ADD SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x7 DUP3 ADD SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x8 DUP3 ADD SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x9 DUP3 ADD SLOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xA DUP3 ADD SLOAD PUSH1 0xE0 SWAP1 SWAP2 ADD SWAP1 PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x632 JUMPI INVALID JUMPDEST PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x63D JUMPI INVALID JUMPDEST DUP2 MSTORE POP POP SWAP1 POP DUP1 PUSH1 0x0 ADD MLOAD SWAP13 POP DUP1 PUSH1 0x20 ADD MLOAD SWAP12 POP DUP1 PUSH1 0x40 ADD MLOAD SWAP11 POP DUP1 PUSH1 0x60 ADD MLOAD SWAP10 POP DUP1 PUSH1 0x80 ADD MLOAD SWAP9 POP DUP1 PUSH1 0xA0 ADD MLOAD SWAP8 POP DUP1 PUSH1 0xC0 ADD MLOAD SWAP7 POP DUP1 PUSH1 0xE0 ADD MLOAD SWAP6 POP DUP1 PUSH2 0x100 ADD MLOAD SWAP5 POP DUP1 PUSH2 0x120 ADD MLOAD SWAP4 POP DUP1 PUSH2 0x140 ADD MLOAD SWAP3 POP DUP1 PUSH2 0x160 ADD MLOAD SWAP2 POP POP SWAP2 SWAP4 SWAP6 SWAP8 SWAP10 SWAP12 POP SWAP2 SWAP4 SWAP6 SWAP8 SWAP10 SWAP12 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x3 DUP2 MSTORE PUSH32 0x5244580000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND ISZERO ISZERO PUSH2 0x72E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x520 CALLER DUP5 DUP5 PUSH2 0xA33 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x520 CALLER DUP5 DUP5 PUSH2 0xB30 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x788 PUSH2 0x1DAA JUMP JUMPDEST PUSH2 0x790 PUSH2 0x1DAA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x7CF DUP14 DUP14 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP PUSH2 0xC8F SWAP5 POP POP POP POP POP JUMP JUMPDEST SWAP6 POP PUSH2 0x80A DUP12 DUP12 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP PUSH2 0xC8F SWAP5 POP POP POP POP POP JUMP JUMPDEST SWAP5 POP PUSH2 0x815 DUP7 PUSH2 0xF49 JUMP JUMPDEST SWAP4 POP PUSH2 0x820 DUP6 PUSH2 0xF49 JUMP JUMPDEST SWAP3 POP PUSH2 0x82B DUP5 PUSH2 0x1177 JUMP JUMPDEST ISZERO SWAP2 POP PUSH2 0x837 DUP4 PUSH2 0x1177 JUMP JUMPDEST ISZERO SWAP1 POP DUP2 DUP1 ISZERO PUSH2 0x844 JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0x8EC JUMPI PUSH2 0x861 DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD ADDRESS DUP10 PUSH1 0xC0 ADD MLOAD PUSH2 0x11A4 JUMP JUMPDEST PUSH2 0x879 DUP6 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD ADDRESS DUP9 PUSH1 0xC0 ADD MLOAD PUSH2 0x11A4 JUMP JUMPDEST PUSH2 0x8AF DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x20 ADD MLOAD DUP9 PUSH1 0x40 ADD MLOAD DUP10 PUSH1 0x60 ADD MLOAD DUP11 PUSH1 0x80 ADD MLOAD DUP12 PUSH1 0xA0 ADD MLOAD DUP13 PUSH1 0xC0 ADD MLOAD DUP14 PUSH1 0xE0 ADD MLOAD DUP15 PUSH2 0x100 ADD MLOAD PUSH2 0x12C4 JUMP JUMPDEST POP PUSH2 0x8E6 DUP6 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x60 ADD MLOAD DUP10 PUSH1 0x80 ADD MLOAD DUP11 PUSH1 0xA0 ADD MLOAD DUP12 PUSH1 0xC0 ADD MLOAD DUP13 PUSH1 0xE0 ADD MLOAD DUP14 PUSH2 0x100 ADD MLOAD PUSH2 0x12C4 JUMP JUMPDEST POP PUSH2 0xA23 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x98A JUMPI PUSH2 0x90A DUP6 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD ADDRESS DUP9 PUSH1 0xC0 ADD MLOAD PUSH2 0x11A4 JUMP JUMPDEST PUSH2 0x940 DUP6 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x60 ADD MLOAD DUP10 PUSH1 0x80 ADD MLOAD DUP11 PUSH1 0xA0 ADD MLOAD DUP12 PUSH1 0xC0 ADD MLOAD DUP13 PUSH1 0xE0 ADD MLOAD DUP14 PUSH2 0x100 ADD MLOAD PUSH2 0x12C4 JUMP JUMPDEST POP PUSH2 0x985 DUP5 DUP8 PUSH1 0x40 ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD DUP13 DUP13 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP PUSH2 0x186F SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0xA23 JUMP JUMPDEST DUP2 ISZERO PUSH2 0xA23 JUMPI PUSH2 0x9A8 DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD ADDRESS DUP10 PUSH1 0xC0 ADD MLOAD PUSH2 0x11A4 JUMP JUMPDEST PUSH2 0x9DE DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x20 ADD MLOAD DUP9 PUSH1 0x40 ADD MLOAD DUP10 PUSH1 0x60 ADD MLOAD DUP11 PUSH1 0x80 ADD MLOAD DUP12 PUSH1 0xA0 ADD MLOAD DUP13 PUSH1 0xC0 ADD MLOAD DUP14 PUSH1 0xE0 ADD MLOAD DUP15 PUSH2 0x100 ADD MLOAD PUSH2 0x12C4 JUMP JUMPDEST POP PUSH2 0xA23 DUP4 DUP7 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x40 ADD MLOAD DUP13 DUP13 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP PUSH2 0x186F SWAP5 POP POP POP POP POP JUMP JUMPDEST POP POP POP POP POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0xA75 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD DUP2 GT ISZERO JUMPDEST ISZERO ISZERO PUSH2 0xA80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH2 0xABD SWAP1 DUP3 PUSH2 0x1B20 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP9 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE DUP2 MLOAD SWAP5 DUP6 MSTORE SWAP1 MLOAD SWAP3 SWAP4 SWAP2 SWAP3 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0xB65 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 GT ISZERO JUMPDEST ISZERO ISZERO PUSH2 0xB70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xBA0 SWAP1 DUP3 PUSH2 0x1B20 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP5 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0xBDC SWAP1 DUP3 PUSH2 0x1B97 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP4 SWAP3 DUP8 AND SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0xC52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH2 0xABD SWAP1 DUP3 PUSH2 0x1B97 JUMP JUMPDEST PUSH2 0xC97 PUSH2 0x1DAA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP12 MLOAD PUSH2 0x140 EQ ISZERO ISZERO PUSH2 0xD19 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F41535345545F444154415F4C454E47544800000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0xD2A DUP13 PUSH1 0x0 PUSH4 0xFFFFFFFF PUSH2 0x1C12 AND JUMP JUMPDEST SWAP10 POP PUSH2 0xD3D DUP13 PUSH1 0x20 PUSH4 0xFFFFFFFF PUSH2 0x1C12 AND JUMP JUMPDEST SWAP9 POP PUSH2 0xD50 DUP13 PUSH1 0x40 PUSH4 0xFFFFFFFF PUSH2 0x1C12 AND JUMP JUMPDEST SWAP8 POP PUSH2 0xD63 DUP13 PUSH1 0x60 PUSH4 0xFFFFFFFF PUSH2 0x1C12 AND JUMP JUMPDEST SWAP7 POP PUSH1 0x0 PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 MUL DUP13 PUSH1 0x9F DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xD98 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD ADD MLOAD PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 SWAP1 DIV PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 MUL PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND GT PUSH2 0xE11 JUMPI PUSH1 0x0 PUSH2 0xE14 JUMP JUMPDEST PUSH1 0x1 JUMPDEST SWAP6 POP PUSH2 0xE27 DUP13 PUSH1 0xA0 PUSH4 0xFFFFFFFF PUSH2 0x1CCE AND JUMP JUMPDEST SWAP5 POP PUSH2 0xE3A DUP13 PUSH1 0xC0 PUSH4 0xFFFFFFFF PUSH2 0x1D74 AND JUMP JUMPDEST SWAP4 POP PUSH2 0xE4D DUP13 PUSH1 0xE0 PUSH4 0xFFFFFFFF PUSH2 0x1D74 AND JUMP JUMPDEST SWAP3 POP PUSH2 0xE61 DUP13 PUSH2 0x100 PUSH4 0xFFFFFFFF PUSH2 0x1D74 AND JUMP JUMPDEST SWAP2 POP PUSH2 0xE75 DUP13 PUSH2 0x120 PUSH4 0xFFFFFFFF PUSH2 0x1D74 AND JUMP JUMPDEST SWAP1 POP PUSH2 0x180 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0xF00 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xF37 JUMPI INVALID JUMPDEST SWAP1 MSTORE SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 PUSH1 0x0 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD DUP7 PUSH1 0x80 ADD MLOAD DUP8 PUSH1 0xA0 ADD MLOAD DUP9 PUSH2 0x140 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP5 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1088 JUMPI INVALID JUMPDEST PUSH1 0xFF AND PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x1 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP8 POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP DUP1 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x1126 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x10E9 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 SWAP1 SWAP4 SUB PUSH2 0x100 EXP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD DUP1 NOT SWAP1 SWAP2 AND SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 MSTORE PUSH1 0x40 MLOAD SWAP3 ADD DUP3 SWAP1 SUB SWAP1 SWAP2 KECCAK256 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 PUSH1 0xA ADD SLOAD PUSH1 0xFF AND SWAP1 DUP2 GT ISZERO PUSH2 0x119D JUMPI INVALID JUMPDEST EQ SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP5 SWAP1 MSTORE SWAP2 MLOAD SWAP2 DUP7 AND SWAP2 PUSH4 0x23B872DD SWAP2 PUSH1 0x64 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1225 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1239 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x124F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD ISZERO ISZERO PUSH2 0x12BE JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x554E41424C455F544F5F5452414E534645525F45524332305F544F4B454E0000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12CE PUSH2 0x1DAA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP12 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1308 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND ISZERO ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x1340 JUMPI POP DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO ISZERO PUSH2 0x13AD JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305F544F4B454E5F4144445245535345535F494E56414C4944000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x13E7 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND ISZERO ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x141F JUMPI POP DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO ISZERO PUSH2 0x148C JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5452414445525F4144445245535345535F494E56414C49440000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP8 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x149A JUMPI INVALID JUMPDEST EQ DUP1 PUSH2 0x14B1 JUMPI POP PUSH1 0x1 DUP8 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x14AF JUMPI INVALID JUMPDEST EQ JUMPDEST ISZERO ISZERO PUSH2 0x151E JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54524144455F545950455F494E56414C49440000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x180 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 DUP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x15A7 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x15DE JUMPI INVALID JUMPDEST SWAP1 MSTORE SWAP1 POP PUSH2 0x15EB DUP2 PUSH2 0xF49 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x9 ADD SLOAD SWAP1 SWAP3 POP ISZERO PUSH2 0x166C JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x504F534954494F4E5F414C52454144595F4F50454E4544000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP3 DUP4 SWAP1 KECCAK256 DUP5 MLOAD DUP2 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP1 DUP2 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND OR DUP4 SSTORE SWAP3 DUP7 ADD MLOAD PUSH1 0x1 DUP1 DUP5 ADD DUP1 SLOAD DUP7 AND SWAP3 DUP5 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE SWAP5 DUP7 ADD MLOAD PUSH1 0x2 DUP4 ADD DUP1 SLOAD DUP6 AND SWAP2 DUP4 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x60 DUP7 ADD MLOAD SWAP4 DUP3 ADD DUP1 SLOAD SWAP1 SWAP4 AND SWAP4 AND SWAP3 SWAP1 SWAP3 OR DUP1 DUP3 SSTORE PUSH1 0x80 DUP6 ADD MLOAD DUP6 SWAP5 SWAP1 SWAP3 SWAP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DUP5 SWAP1 DUP2 GT ISZERO PUSH2 0x1752 JUMPI INVALID JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH1 0x4 DUP3 ADD SSTORE PUSH1 0xC0 DUP3 ADD MLOAD PUSH1 0x5 DUP3 ADD SSTORE PUSH1 0xE0 DUP3 ADD MLOAD PUSH1 0x6 DUP3 ADD SSTORE PUSH2 0x100 DUP3 ADD MLOAD PUSH1 0x7 DUP3 ADD SSTORE PUSH2 0x120 DUP3 ADD MLOAD PUSH1 0x8 DUP3 ADD SSTORE PUSH2 0x140 DUP3 ADD MLOAD PUSH1 0x9 DUP3 ADD SSTORE PUSH2 0x160 DUP3 ADD MLOAD PUSH1 0xA DUP3 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 DUP4 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x17D2 JUMPI INVALID JUMPDEST MUL OR SWAP1 SSTORE POP SWAP1 POP POP DUP7 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x17E6 JUMPI INVALID JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP15 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP14 DUP2 AND DUP3 DUP5 ADD MSTORE PUSH1 0x60 DUP3 ADD DUP11 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD DUP10 SWAP1 MSTORE PUSH1 0xA0 DUP3 ADD DUP9 SWAP1 MSTORE PUSH1 0xC0 DUP3 ADD DUP8 SWAP1 MSTORE SWAP2 MLOAD DUP3 DUP13 AND SWAP3 DUP14 AND SWAP2 PUSH32 0x9081AF4372FD7C22014980982F4C3A122105334CE30A7F809691CB380F8F8965 SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 0xE0 ADD SWAP1 LOG4 POP SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 PUSH1 0x1 PUSH1 0xA DUP4 ADD SLOAD PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1893 JUMPI INVALID JUMPDEST EQ PUSH2 0x18FF JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x504F534954494F4E5F49535F4E4F545F4F50454E454400000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1939 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND ISZERO ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x1971 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO ISZERO PUSH2 0x19DE JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5452414445525F4144445245535345535F494E56414C49440000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x19E7 DUP4 PUSH2 0x1D80 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x3 DUP4 ADD SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1A16 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1A21 JUMPI PUSH2 0x1AC0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x3 DUP4 ADD SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1A4E JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1A59 JUMPI PUSH2 0x1AC0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x504F534954494F4E5F54524144455F545950455F494E56414C49440000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE DUP2 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP9 AND SWAP4 SWAP1 DUP10 AND SWAP3 PUSH32 0xCD2EBF70BDF4DEC83BC8BB4634D2077DD87B0A3AA452E45D4599B9114A1960F6 SWAP3 SWAP1 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x1B91 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x55494E543235365F554E444552464C4F57000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x1C0B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x55494E543235365F4F564552464C4F5700000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO ISZERO ISZERO PUSH2 0x1CAF JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F32305F4C454E4754485F5245 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST POP ADD PUSH1 0x14 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO ISZERO ISZERO PUSH2 0x1D6B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F33325F4C454E4754485F5245 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C0B DUP4 DUP4 PUSH2 0x1CCE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MLOAD LT PUSH2 0x1DA1 JUMPI PUSH2 0x1D9C DUP3 PUSH1 0x0 PUSH4 0xFFFFFFFF PUSH2 0x1CCE AND JUMP JUMPDEST PUSH2 0x1DA4 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x180 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 PUSH1 0x80 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1E10 JUMPI INVALID JUMPDEST SWAP1 MSTORE SWAP1 JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 0xe6 SUB 0xc5 0xb6 KECCAK256 0xb4 0x24 0xe7 COINBASE 0xd1 SUB ADDMOD 0xb8 ADDRESS 0xdf 0x48 PUSH19 0x7F3D3028E77142AB6DA0BB1B86B6D800290000 ",
				"sourceMap": "57:263:1:-;;;;;8558:6:0;321:12;:29;;;370:10;360:21;;;:9;:21;;;;;;;:36;;;411:46;;;370:10;;321:12;;411:46;;;1382:15:2;11141:7;1382:34;1368:11;:48;57:263:1;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x6080604052600436106100c45763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100c9578063095ea7b31461015357806318160ddd1461019857806323b872dd146101bf578063313ce567146101f657806339509351146102215780635f458e511461025257806370a082311461030957806395d89b4114610337578063a457c2d71461034c578063a9059cbb1461037d578063dd62ed3e146103ae578063f4970c90146103e2575b600080fd5b3480156100d557600080fd5b506100de61041a565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610118578181015183820152602001610100565b50505050905090810190601f1680156101455780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015f57600080fd5b5061018473ffffffffffffffffffffffffffffffffffffffff60043516602435610451565b604080519115158252519081900360200190f35b3480156101a457600080fd5b506101ad6104c4565b60408051918252519081900360200190f35b3480156101cb57600080fd5b5061018473ffffffffffffffffffffffffffffffffffffffff600435811690602435166044356104ca565b34801561020257600080fd5b5061020b6104ec565b6040805160ff9092168252519081900360200190f35b34801561022d57600080fd5b5061018473ffffffffffffffffffffffffffffffffffffffff600435166024356104f1565b34801561025e57600080fd5b5061026a600435610529565b6040805173ffffffffffffffffffffffffffffffffffffffff808f1682528d811660208301528c811692820192909252908a166060820152608081018960018111156102b257fe5b60ff1681526020018881526020018781526020018681526020018581526020018481526020018381526020018260038111156102ea57fe5b60ff1681526020019c5050505050505050505050505060405180910390f35b34801561031557600080fd5b506101ad73ffffffffffffffffffffffffffffffffffffffff600435166106ab565b34801561034357600080fd5b506100de6106d3565b34801561035857600080fd5b5061018473ffffffffffffffffffffffffffffffffffffffff6004351660243561070a565b34801561038957600080fd5b5061018473ffffffffffffffffffffffffffffffffffffffff60043516602435610739565b3480156103ba57600080fd5b506101ad73ffffffffffffffffffffffffffffffffffffffff60043581169060243516610746565b3480156103ee57600080fd5b50610184602460048035828101929082013591813580830192908201359160443591820191013561077e565b60408051808201909152601181527f30782050726f746f636f6c20546f6b656e000000000000000000000000000000602082015281565b33600081815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60005490565b60006104d7843384610a33565b6104e2848484610b30565b5060019392505050565b601281565b600073ffffffffffffffffffffffffffffffffffffffff8316151561051557600080fd5b610520338484610c45565b50600192915050565b600080600080600080600080600080600080610543611daa565b60008e815260036020818152604092839020835161018081018552815473ffffffffffffffffffffffffffffffffffffffff90811682526001808401548216948301949094526002830154811695820195909552928101549384166060840152919260808401917401000000000000000000000000000000000000000090910460ff16908111156105d057fe5b60018111156105db57fe5b815260048201546020820152600582015460408201526006820154606082015260078201546080820152600882015460a0820152600982015460c0820152600a82015460e09091019060ff16600381111561063257fe5b600381111561063d57fe5b81525050905080600001519c5080602001519b5080604001519a5080606001519950806080015198508060a0015197508060c0015196508060e00151955080610100015194508061012001519350806101400151925080610160015191505091939597999b5091939597999b565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205490565b60408051808201909152600381527f5244580000000000000000000000000000000000000000000000000000000000602082015281565b600073ffffffffffffffffffffffffffffffffffffffff8316151561072e57600080fd5b610520338484610a33565b6000610520338484610b30565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260026020908152604080832093909416825291909152205490565b6000610788611daa565b610790611daa565b6000806000806107cf8d8d8080601f01602080910402602001604051908101604052809392919081815260200183838082843750610c8f945050505050565b955061080a8b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843750610c8f945050505050565b945061081586610f49565b935061082085610f49565b925061082b84611177565b15915061083783611177565b1590508180156108445750805b156108ec5761086186600001518760400151308960c001516111a4565b61087985600001518660400151308860c001516111a4565b6108af86600001518760200151886040015189606001518a608001518b60a001518c60c001518d60e001518e61010001516112c4565b506108e6856000015186602001518760400151886060015189608001518a60a001518b60c001518c60e001518d61010001516112c4565b50610a23565b801561098a5761090a85600001518660400151308860c001516111a4565b610940856000015186602001518760400151886060015189608001518a60a001518b60c001518c60e001518d61010001516112c4565b5061098584876040015187604001518c8c8080601f0160208091040260200160405190810160405280939291908181526020018383808284375061186f945050505050565b610a23565b8115610a23576109a886600001518760400151308960c001516111a4565b6109de86600001518760200151886040015189606001518a608001518b60a001518c60c001518d60e001518e61010001516112c4565b50610a2383866040015188604001518c8c8080601f0160208091040260200160405190810160405280939291908181526020018383808284375061186f945050505050565b5050505050509695505050505050565b600081118015610a75575073ffffffffffffffffffffffffffffffffffffffff8084166000908152600260209081526040808320938616835292905220548111155b1515610a8057600080fd5b73ffffffffffffffffffffffffffffffffffffffff808416600090815260026020908152604080832093861683529290522054610abd9082611b20565b73ffffffffffffffffffffffffffffffffffffffff84811660008181526002602090815260408083209488168084529482529182902085905581519485529051929391927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b600081118015610b65575073ffffffffffffffffffffffffffffffffffffffff83166000908152600160205260409020548111155b1515610b7057600080fd5b73ffffffffffffffffffffffffffffffffffffffff8316600090815260016020526040902054610ba09082611b20565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152600160205260408082209390935590841681522054610bdc9082611b97565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008111610c5257600080fd5b73ffffffffffffffffffffffffffffffffffffffff808416600090815260026020908152604080832093861683529290522054610abd9082611b97565b610c97611daa565b6000806000806000806000806000808b51610140141515610d1957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f494e56414c49445f41535345545f444154415f4c454e47544800000000000000604482015290519081900360640190fd5b610d2a8c600063ffffffff611c1216565b9950610d3d8c602063ffffffff611c1216565b9850610d508c604063ffffffff611c1216565b9750610d638c606063ffffffff611c1216565b965060007f0100000000000000000000000000000000000000000000000000000000000000028c609f815181101515610d9857fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191611610e11576000610e14565b60015b9550610e278c60a063ffffffff611cce16565b9450610e3a8c60c063ffffffff611d7416565b9350610e4d8c60e063ffffffff611d7416565b9250610e618c61010063ffffffff611d7416565b9150610e758c61012063ffffffff611d7416565b9050610180604051908101604052808b73ffffffffffffffffffffffffffffffffffffffff1681526020018a73ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff168152602001876001811115610f0057fe5b81526020018681526020018581526020018481526020018381526020016000815260200182815260200160006003811115610f3757fe5b90529c9b505050505050505050505050565b60006060826000015183602001518460400151856060015186608001518760a00151886101400151604051602001808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140184600181111561108857fe5b60ff167f01000000000000000000000000000000000000000000000000000000000000000281526001018381526020018281526020019750505050505050506040516020818303038152906040529050806040518082805190602001908083835b6020831061112657805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016110e9565b5181516020939093036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018019909116921691909117905260405192018290039091209695505050505050565b600060016000838152600360208190526040909120600a015460ff169081111561119d57fe5b1492915050565b604080517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301528481166024830152604482018490529151918616916323b872dd916064808201926020929091908290030181600087803b15801561122557600080fd5b505af1158015611239573d6000803e3d6000fd5b505050506040513d602081101561124f57600080fd5b505115156112be57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f554e41424c455f544f5f5452414e534645525f45524332305f544f4b454e0000604482015290519081900360640190fd5b50505050565b60006112ce611daa565b73ffffffffffffffffffffffffffffffffffffffff8b1615801590611308575073ffffffffffffffffffffffffffffffffffffffff8a1615155b801561134057508973ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff1614155b15156113ad57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332305f544f4b454e5f4144445245535345535f494e56414c4944000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8916158015906113e7575073ffffffffffffffffffffffffffffffffffffffff881615155b801561141f57508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614155b151561148c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f5452414445525f4144445245535345535f494e56414c49440000000000000000604482015290519081900360640190fd5b600087600181111561149a57fe5b14806114b1575060018760018111156114af57fe5b145b151561151e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f54524144455f545950455f494e56414c49440000000000000000000000000000604482015290519081900360640190fd5b610180604051908101604052808c73ffffffffffffffffffffffffffffffffffffffff1681526020018b73ffffffffffffffffffffffffffffffffffffffff1681526020018a73ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018860018111156115a757fe5b815260200187815260200186815260200185815260200184815260200160008152602001428152602001600060038111156115de57fe5b905290506115eb81610f49565b6000818152600360205260409020600901549092501561166c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f504f534954494f4e5f414c52454144595f4f50454e4544000000000000000000604482015290519081900360640190fd5b600082815260036020818152604092839020845181547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff928316178355928601516001808401805486169284169290921790915594860151600283018054851691831691909117905560608601519382018054909316931692909217808255608085015185949092917fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16907401000000000000000000000000000000000000000090849081111561175257fe5b021790555060a0820151600482015560c0820151600582015560e08201516006820155610100820151600782015561012082015160088201556101408201516009820155610160820151600a820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660018360038111156117d257fe5b02179055509050508660018111156117e657fe5b6040805184815273ffffffffffffffffffffffffffffffffffffffff8e811660208301528d811682840152606082018a90526080820189905260a0820188905260c082018790529151828c16928d16917f9081af4372fd7c22014980982f4c3a122105334ce30a7f809691cb380f8f8965919081900360e00190a4509998505050505050505050565b6000848152600360205260408120906001600a83015460ff16600381111561189357fe5b146118ff57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f504f534954494f4e5f49535f4e4f545f4f50454e454400000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff851615801590611939575073ffffffffffffffffffffffffffffffffffffffff841615155b801561197157508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614155b15156119de57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f5452414445525f4144445245535345535f494e56414c49440000000000000000604482015290519081900360640190fd5b6119e783611d80565b90506000600383015474010000000000000000000000000000000000000000900460ff166001811115611a1657fe5b1415611a2157611ac0565b6001600383015474010000000000000000000000000000000000000000900460ff166001811115611a4e57fe5b1415611a5957611ac0565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f504f534954494f4e5f54524144455f545950455f494e56414c49440000000000604482015290519081900360640190fd5b6040805187815260208101839052815173ffffffffffffffffffffffffffffffffffffffff80881693908916927fcd2ebf70bdf4dec83bc8bb4634d2077dd87b0a3aa452e45d4599b9114a1960f6929081900390910190a3505050505050565b600082821115611b9157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f55494e543235365f554e444552464c4f57000000000000000000000000000000604482015290519081900360640190fd5b50900390565b600082820183811015611c0b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f55494e543235365f4f564552464c4f5700000000000000000000000000000000604482015290519081900360640190fd5b9392505050565b600081601401835110151515611caf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f475245415445525f4f525f455155414c5f544f5f32305f4c454e4754485f524560448201527f5155495245440000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b50016014015173ffffffffffffffffffffffffffffffffffffffff1690565b600081602001835110151515611d6b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f475245415445525f4f525f455155414c5f544f5f33325f4c454e4754485f524560448201527f5155495245440000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b50016020015190565b6000611c0b8383611cce565b60006020825110611da157611d9c82600063ffffffff611cce16565b611da4565b60005b92915050565b604080516101808101825260008082526020820181905291810182905260608101829052906080820190815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006003811115611e1057fe5b9052905600a165627a7a72305820e603c5b620b424e741d10308b830df48727f3d3028e77142ab6da0bb1b86b6d80029",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC4 JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x6FDDE03 DUP2 EQ PUSH2 0xC9 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x153 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x198 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1BF JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x1F6 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x221 JUMPI DUP1 PUSH4 0x5F458E51 EQ PUSH2 0x252 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x309 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x337 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x34C JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x37D JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x3AE JUMPI DUP1 PUSH4 0xF4970C90 EQ PUSH2 0x3E2 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDE PUSH2 0x41A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x118 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x100 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x145 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x15F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x184 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x451 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1AD PUSH2 0x4C4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x184 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD DUP2 AND SWAP1 PUSH1 0x24 CALLDATALOAD AND PUSH1 0x44 CALLDATALOAD PUSH2 0x4CA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x202 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20B PUSH2 0x4EC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x184 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x4F1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x25E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26A PUSH1 0x4 CALLDATALOAD PUSH2 0x529 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP16 AND DUP3 MSTORE DUP14 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP13 DUP2 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP11 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP2 ADD DUP10 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x2B2 JUMPI INVALID JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x2EA JUMPI INVALID JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP13 POP POP POP POP POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x315 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1AD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH2 0x6AB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x343 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDE PUSH2 0x6D3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x358 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x184 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x70A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x389 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x184 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x739 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1AD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD DUP2 AND SWAP1 PUSH1 0x24 CALLDATALOAD AND PUSH2 0x746 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x184 PUSH1 0x24 PUSH1 0x4 DUP1 CALLDATALOAD DUP3 DUP2 ADD SWAP3 SWAP1 DUP3 ADD CALLDATALOAD SWAP2 DUP2 CALLDATALOAD DUP1 DUP4 ADD SWAP3 SWAP1 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0x44 CALLDATALOAD SWAP2 DUP3 ADD SWAP2 ADD CALLDATALOAD PUSH2 0x77E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x11 DUP2 MSTORE PUSH32 0x30782050726F746F636F6C20546F6B656E000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP7 SWAP1 SSTORE DUP2 MLOAD DUP7 DUP2 MSTORE SWAP2 MLOAD SWAP4 SWAP5 SWAP1 SWAP4 SWAP1 SWAP3 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP3 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4D7 DUP5 CALLER DUP5 PUSH2 0xA33 JUMP JUMPDEST PUSH2 0x4E2 DUP5 DUP5 DUP5 PUSH2 0xB30 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x12 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND ISZERO ISZERO PUSH2 0x515 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x520 CALLER DUP5 DUP5 PUSH2 0xC45 JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x543 PUSH2 0x1DAA JUMP JUMPDEST PUSH1 0x0 DUP15 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP3 DUP4 SWAP1 KECCAK256 DUP4 MLOAD PUSH2 0x180 DUP2 ADD DUP6 MSTORE DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x1 DUP1 DUP5 ADD SLOAD DUP3 AND SWAP5 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x2 DUP4 ADD SLOAD DUP2 AND SWAP6 DUP3 ADD SWAP6 SWAP1 SWAP6 MSTORE SWAP3 DUP2 ADD SLOAD SWAP4 DUP5 AND PUSH1 0x60 DUP5 ADD MSTORE SWAP2 SWAP3 PUSH1 0x80 DUP5 ADD SWAP2 PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP2 DIV PUSH1 0xFF AND SWAP1 DUP2 GT ISZERO PUSH2 0x5D0 JUMPI INVALID JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x5DB JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x5 DUP3 ADD SLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x6 DUP3 ADD SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x7 DUP3 ADD SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x8 DUP3 ADD SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x9 DUP3 ADD SLOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xA DUP3 ADD SLOAD PUSH1 0xE0 SWAP1 SWAP2 ADD SWAP1 PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x632 JUMPI INVALID JUMPDEST PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x63D JUMPI INVALID JUMPDEST DUP2 MSTORE POP POP SWAP1 POP DUP1 PUSH1 0x0 ADD MLOAD SWAP13 POP DUP1 PUSH1 0x20 ADD MLOAD SWAP12 POP DUP1 PUSH1 0x40 ADD MLOAD SWAP11 POP DUP1 PUSH1 0x60 ADD MLOAD SWAP10 POP DUP1 PUSH1 0x80 ADD MLOAD SWAP9 POP DUP1 PUSH1 0xA0 ADD MLOAD SWAP8 POP DUP1 PUSH1 0xC0 ADD MLOAD SWAP7 POP DUP1 PUSH1 0xE0 ADD MLOAD SWAP6 POP DUP1 PUSH2 0x100 ADD MLOAD SWAP5 POP DUP1 PUSH2 0x120 ADD MLOAD SWAP4 POP DUP1 PUSH2 0x140 ADD MLOAD SWAP3 POP DUP1 PUSH2 0x160 ADD MLOAD SWAP2 POP POP SWAP2 SWAP4 SWAP6 SWAP8 SWAP10 SWAP12 POP SWAP2 SWAP4 SWAP6 SWAP8 SWAP10 SWAP12 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x3 DUP2 MSTORE PUSH32 0x5244580000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND ISZERO ISZERO PUSH2 0x72E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x520 CALLER DUP5 DUP5 PUSH2 0xA33 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x520 CALLER DUP5 DUP5 PUSH2 0xB30 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x788 PUSH2 0x1DAA JUMP JUMPDEST PUSH2 0x790 PUSH2 0x1DAA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x7CF DUP14 DUP14 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP PUSH2 0xC8F SWAP5 POP POP POP POP POP JUMP JUMPDEST SWAP6 POP PUSH2 0x80A DUP12 DUP12 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP PUSH2 0xC8F SWAP5 POP POP POP POP POP JUMP JUMPDEST SWAP5 POP PUSH2 0x815 DUP7 PUSH2 0xF49 JUMP JUMPDEST SWAP4 POP PUSH2 0x820 DUP6 PUSH2 0xF49 JUMP JUMPDEST SWAP3 POP PUSH2 0x82B DUP5 PUSH2 0x1177 JUMP JUMPDEST ISZERO SWAP2 POP PUSH2 0x837 DUP4 PUSH2 0x1177 JUMP JUMPDEST ISZERO SWAP1 POP DUP2 DUP1 ISZERO PUSH2 0x844 JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0x8EC JUMPI PUSH2 0x861 DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD ADDRESS DUP10 PUSH1 0xC0 ADD MLOAD PUSH2 0x11A4 JUMP JUMPDEST PUSH2 0x879 DUP6 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD ADDRESS DUP9 PUSH1 0xC0 ADD MLOAD PUSH2 0x11A4 JUMP JUMPDEST PUSH2 0x8AF DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x20 ADD MLOAD DUP9 PUSH1 0x40 ADD MLOAD DUP10 PUSH1 0x60 ADD MLOAD DUP11 PUSH1 0x80 ADD MLOAD DUP12 PUSH1 0xA0 ADD MLOAD DUP13 PUSH1 0xC0 ADD MLOAD DUP14 PUSH1 0xE0 ADD MLOAD DUP15 PUSH2 0x100 ADD MLOAD PUSH2 0x12C4 JUMP JUMPDEST POP PUSH2 0x8E6 DUP6 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x60 ADD MLOAD DUP10 PUSH1 0x80 ADD MLOAD DUP11 PUSH1 0xA0 ADD MLOAD DUP12 PUSH1 0xC0 ADD MLOAD DUP13 PUSH1 0xE0 ADD MLOAD DUP14 PUSH2 0x100 ADD MLOAD PUSH2 0x12C4 JUMP JUMPDEST POP PUSH2 0xA23 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x98A JUMPI PUSH2 0x90A DUP6 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD ADDRESS DUP9 PUSH1 0xC0 ADD MLOAD PUSH2 0x11A4 JUMP JUMPDEST PUSH2 0x940 DUP6 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x60 ADD MLOAD DUP10 PUSH1 0x80 ADD MLOAD DUP11 PUSH1 0xA0 ADD MLOAD DUP12 PUSH1 0xC0 ADD MLOAD DUP13 PUSH1 0xE0 ADD MLOAD DUP14 PUSH2 0x100 ADD MLOAD PUSH2 0x12C4 JUMP JUMPDEST POP PUSH2 0x985 DUP5 DUP8 PUSH1 0x40 ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD DUP13 DUP13 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP PUSH2 0x186F SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0xA23 JUMP JUMPDEST DUP2 ISZERO PUSH2 0xA23 JUMPI PUSH2 0x9A8 DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD ADDRESS DUP10 PUSH1 0xC0 ADD MLOAD PUSH2 0x11A4 JUMP JUMPDEST PUSH2 0x9DE DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x20 ADD MLOAD DUP9 PUSH1 0x40 ADD MLOAD DUP10 PUSH1 0x60 ADD MLOAD DUP11 PUSH1 0x80 ADD MLOAD DUP12 PUSH1 0xA0 ADD MLOAD DUP13 PUSH1 0xC0 ADD MLOAD DUP14 PUSH1 0xE0 ADD MLOAD DUP15 PUSH2 0x100 ADD MLOAD PUSH2 0x12C4 JUMP JUMPDEST POP PUSH2 0xA23 DUP4 DUP7 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x40 ADD MLOAD DUP13 DUP13 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP PUSH2 0x186F SWAP5 POP POP POP POP POP JUMP JUMPDEST POP POP POP POP POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0xA75 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD DUP2 GT ISZERO JUMPDEST ISZERO ISZERO PUSH2 0xA80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH2 0xABD SWAP1 DUP3 PUSH2 0x1B20 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP9 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE DUP2 MLOAD SWAP5 DUP6 MSTORE SWAP1 MLOAD SWAP3 SWAP4 SWAP2 SWAP3 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0xB65 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 GT ISZERO JUMPDEST ISZERO ISZERO PUSH2 0xB70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xBA0 SWAP1 DUP3 PUSH2 0x1B20 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP5 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0xBDC SWAP1 DUP3 PUSH2 0x1B97 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP4 SWAP3 DUP8 AND SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0xC52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH2 0xABD SWAP1 DUP3 PUSH2 0x1B97 JUMP JUMPDEST PUSH2 0xC97 PUSH2 0x1DAA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP12 MLOAD PUSH2 0x140 EQ ISZERO ISZERO PUSH2 0xD19 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F41535345545F444154415F4C454E47544800000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0xD2A DUP13 PUSH1 0x0 PUSH4 0xFFFFFFFF PUSH2 0x1C12 AND JUMP JUMPDEST SWAP10 POP PUSH2 0xD3D DUP13 PUSH1 0x20 PUSH4 0xFFFFFFFF PUSH2 0x1C12 AND JUMP JUMPDEST SWAP9 POP PUSH2 0xD50 DUP13 PUSH1 0x40 PUSH4 0xFFFFFFFF PUSH2 0x1C12 AND JUMP JUMPDEST SWAP8 POP PUSH2 0xD63 DUP13 PUSH1 0x60 PUSH4 0xFFFFFFFF PUSH2 0x1C12 AND JUMP JUMPDEST SWAP7 POP PUSH1 0x0 PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 MUL DUP13 PUSH1 0x9F DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xD98 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD ADD MLOAD PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 SWAP1 DIV PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 MUL PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND GT PUSH2 0xE11 JUMPI PUSH1 0x0 PUSH2 0xE14 JUMP JUMPDEST PUSH1 0x1 JUMPDEST SWAP6 POP PUSH2 0xE27 DUP13 PUSH1 0xA0 PUSH4 0xFFFFFFFF PUSH2 0x1CCE AND JUMP JUMPDEST SWAP5 POP PUSH2 0xE3A DUP13 PUSH1 0xC0 PUSH4 0xFFFFFFFF PUSH2 0x1D74 AND JUMP JUMPDEST SWAP4 POP PUSH2 0xE4D DUP13 PUSH1 0xE0 PUSH4 0xFFFFFFFF PUSH2 0x1D74 AND JUMP JUMPDEST SWAP3 POP PUSH2 0xE61 DUP13 PUSH2 0x100 PUSH4 0xFFFFFFFF PUSH2 0x1D74 AND JUMP JUMPDEST SWAP2 POP PUSH2 0xE75 DUP13 PUSH2 0x120 PUSH4 0xFFFFFFFF PUSH2 0x1D74 AND JUMP JUMPDEST SWAP1 POP PUSH2 0x180 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0xF00 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xF37 JUMPI INVALID JUMPDEST SWAP1 MSTORE SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 PUSH1 0x0 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD DUP7 PUSH1 0x80 ADD MLOAD DUP8 PUSH1 0xA0 ADD MLOAD DUP9 PUSH2 0x140 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP5 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1088 JUMPI INVALID JUMPDEST PUSH1 0xFF AND PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x1 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP8 POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP DUP1 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x1126 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x10E9 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 SWAP1 SWAP4 SUB PUSH2 0x100 EXP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD DUP1 NOT SWAP1 SWAP2 AND SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 MSTORE PUSH1 0x40 MLOAD SWAP3 ADD DUP3 SWAP1 SUB SWAP1 SWAP2 KECCAK256 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 PUSH1 0xA ADD SLOAD PUSH1 0xFF AND SWAP1 DUP2 GT ISZERO PUSH2 0x119D JUMPI INVALID JUMPDEST EQ SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP5 SWAP1 MSTORE SWAP2 MLOAD SWAP2 DUP7 AND SWAP2 PUSH4 0x23B872DD SWAP2 PUSH1 0x64 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1225 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1239 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x124F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD ISZERO ISZERO PUSH2 0x12BE JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x554E41424C455F544F5F5452414E534645525F45524332305F544F4B454E0000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12CE PUSH2 0x1DAA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP12 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1308 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND ISZERO ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x1340 JUMPI POP DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO ISZERO PUSH2 0x13AD JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305F544F4B454E5F4144445245535345535F494E56414C4944000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x13E7 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND ISZERO ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x141F JUMPI POP DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO ISZERO PUSH2 0x148C JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5452414445525F4144445245535345535F494E56414C49440000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP8 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x149A JUMPI INVALID JUMPDEST EQ DUP1 PUSH2 0x14B1 JUMPI POP PUSH1 0x1 DUP8 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x14AF JUMPI INVALID JUMPDEST EQ JUMPDEST ISZERO ISZERO PUSH2 0x151E JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54524144455F545950455F494E56414C49440000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x180 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 DUP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x15A7 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x15DE JUMPI INVALID JUMPDEST SWAP1 MSTORE SWAP1 POP PUSH2 0x15EB DUP2 PUSH2 0xF49 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x9 ADD SLOAD SWAP1 SWAP3 POP ISZERO PUSH2 0x166C JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x504F534954494F4E5F414C52454144595F4F50454E4544000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP3 DUP4 SWAP1 KECCAK256 DUP5 MLOAD DUP2 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP1 DUP2 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND OR DUP4 SSTORE SWAP3 DUP7 ADD MLOAD PUSH1 0x1 DUP1 DUP5 ADD DUP1 SLOAD DUP7 AND SWAP3 DUP5 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE SWAP5 DUP7 ADD MLOAD PUSH1 0x2 DUP4 ADD DUP1 SLOAD DUP6 AND SWAP2 DUP4 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x60 DUP7 ADD MLOAD SWAP4 DUP3 ADD DUP1 SLOAD SWAP1 SWAP4 AND SWAP4 AND SWAP3 SWAP1 SWAP3 OR DUP1 DUP3 SSTORE PUSH1 0x80 DUP6 ADD MLOAD DUP6 SWAP5 SWAP1 SWAP3 SWAP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DUP5 SWAP1 DUP2 GT ISZERO PUSH2 0x1752 JUMPI INVALID JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH1 0x4 DUP3 ADD SSTORE PUSH1 0xC0 DUP3 ADD MLOAD PUSH1 0x5 DUP3 ADD SSTORE PUSH1 0xE0 DUP3 ADD MLOAD PUSH1 0x6 DUP3 ADD SSTORE PUSH2 0x100 DUP3 ADD MLOAD PUSH1 0x7 DUP3 ADD SSTORE PUSH2 0x120 DUP3 ADD MLOAD PUSH1 0x8 DUP3 ADD SSTORE PUSH2 0x140 DUP3 ADD MLOAD PUSH1 0x9 DUP3 ADD SSTORE PUSH2 0x160 DUP3 ADD MLOAD PUSH1 0xA DUP3 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 DUP4 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x17D2 JUMPI INVALID JUMPDEST MUL OR SWAP1 SSTORE POP SWAP1 POP POP DUP7 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x17E6 JUMPI INVALID JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP15 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP14 DUP2 AND DUP3 DUP5 ADD MSTORE PUSH1 0x60 DUP3 ADD DUP11 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD DUP10 SWAP1 MSTORE PUSH1 0xA0 DUP3 ADD DUP9 SWAP1 MSTORE PUSH1 0xC0 DUP3 ADD DUP8 SWAP1 MSTORE SWAP2 MLOAD DUP3 DUP13 AND SWAP3 DUP14 AND SWAP2 PUSH32 0x9081AF4372FD7C22014980982F4C3A122105334CE30A7F809691CB380F8F8965 SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 0xE0 ADD SWAP1 LOG4 POP SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 PUSH1 0x1 PUSH1 0xA DUP4 ADD SLOAD PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1893 JUMPI INVALID JUMPDEST EQ PUSH2 0x18FF JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x504F534954494F4E5F49535F4E4F545F4F50454E454400000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1939 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND ISZERO ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x1971 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO ISZERO PUSH2 0x19DE JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5452414445525F4144445245535345535F494E56414C49440000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x19E7 DUP4 PUSH2 0x1D80 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x3 DUP4 ADD SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1A16 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1A21 JUMPI PUSH2 0x1AC0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x3 DUP4 ADD SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1A4E JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1A59 JUMPI PUSH2 0x1AC0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x504F534954494F4E5F54524144455F545950455F494E56414C49440000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE DUP2 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP9 AND SWAP4 SWAP1 DUP10 AND SWAP3 PUSH32 0xCD2EBF70BDF4DEC83BC8BB4634D2077DD87B0A3AA452E45D4599B9114A1960F6 SWAP3 SWAP1 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x1B91 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x55494E543235365F554E444552464C4F57000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x1C0B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x55494E543235365F4F564552464C4F5700000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO ISZERO ISZERO PUSH2 0x1CAF JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F32305F4C454E4754485F5245 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST POP ADD PUSH1 0x14 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO ISZERO ISZERO PUSH2 0x1D6B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F33325F4C454E4754485F5245 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C0B DUP4 DUP4 PUSH2 0x1CCE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MLOAD LT PUSH2 0x1DA1 JUMPI PUSH2 0x1D9C DUP3 PUSH1 0x0 PUSH4 0xFFFFFFFF PUSH2 0x1CCE AND JUMP JUMPDEST PUSH2 0x1DA4 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x180 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 PUSH1 0x80 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1E10 JUMPI INVALID JUMPDEST SWAP1 MSTORE SWAP1 JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 0xe6 SUB 0xc5 0xb6 KECCAK256 0xb4 0x24 0xe7 COINBASE 0xd1 SUB ADDMOD 0xb8 ADDRESS 0xdf 0x48 PUSH19 0x7F3D3028E77142AB6DA0BB1B86B6D800290000 ",
				"sourceMap": "57:263:1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;182:49;;8:9:-1;5:2;;;30:1;27;20:12;5:2;182:49:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;182:49:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2181:202:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2181:202:0;;;;;;;;;;;;;;;;;;;;;;;;;;;3968:91;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3968:91:0;;;;;;;;;;;;;;;;;;;;1266:204;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1266:204:0;;;;;;;;;;;;;;141:35:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;141:35:1;;;;;;;;;;;;;;;;;;;;;;;2897:207:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2897:207:0;;;;;;;;;4610:936:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4610:936:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4277:106:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4277:106:0;;;;;;;237:37:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;237:37:1;;;;3618:207:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3618:207:0;;;;;;;;;722:139;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;722:139:0;;;;;;;;;4718:134;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4718:134:0;;;;;;;;;;;;1429:3175:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1429:3175:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;182:49:1;;;;;;;;;;;;;;;;;;;:::o;2181:202:0:-;2276:10;2248:4;2264:23;;;:11;:23;;;;;;;;;:32;;;;;;;;;;;:40;;;2319:36;;;;;;;2248:4;;2264:32;;2276:10;;2319:36;;;;;;;;-1:-1:-1;2372:4:0;2181:202;;;;:::o;3968:91::-;4014:7;4040:12;3968:91;:::o;1266:204::-;1347:4;1363:43;1382:4;1388:10;1400:5;1363:18;:43::i;:::-;1416:26;1426:4;1432:2;1436:5;1416:9;:26::i;:::-;-1:-1:-1;1459:4:0;1266:204;;;;;:::o;141:35:1:-;174:2;141:35;:::o;2897:207:0:-;2974:4;2998:21;;;;;2990:30;;;;;;3030:46;3049:10;3061:7;3070:5;3030:18;:46::i;:::-;-1:-1:-1;3093:4:0;2897:207;;;;:::o;4610:936:2:-;4687:17;4714:18;4742:20;4772;4802:19;4831:13;4854:14;4878:17;4905:18;4933:14;4957:17;4984:19;5020:24;;:::i;:::-;5047:22;;;;:10;:22;;;;;;;;;5020:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5091:8;:18;;;5079:30;;5132:8;:19;;;5119:32;;5176:8;:21;;;5161:36;;5222:8;:21;;;5207:36;;5265:8;:18;;;5253:30;;5302:8;:15;;;5293:24;;5336:8;:15;;;5327:24;;5373:8;:18;;;5361:30;;5414:8;:19;;;5401:32;;5452:8;:15;;;5443:24;;5489:8;:18;;;5477:30;;5525:8;:14;;;5517:22;;4610:936;;;;;;;;;;;;;;:::o;4277:106:0:-;4360:16;;4334:7;4360:16;;;:9;:16;;;;;;;4277:106::o;237:37:1:-;;;;;;;;;;;;;;;;;;;:::o;3618:207:0:-;3695:4;3719:21;;;;;3711:30;;;;;;3751:46;3770:10;3782:7;3791:5;3751:18;:46::i;722:139::-;785:4;801:32;811:10;823:2;827:5;801:9;:32::i;4718:134::-;4818:18;;;;4792:7;4818:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;4718:134::o;1429:3175:2:-;1552:4;1568:29;;:::i;:::-;1640;;:::i;:::-;1712:23;1784;1856:17;1920;1600:30;1615:14;;1600:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1600:14:2;;-1:-1:-1;;;;;1600:30:2:i;:::-;1568:62;;1672:30;1687:14;;1672:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1672:14:2;;-1:-1:-1;;;;;1672:30:2:i;:::-;1640:62;;1738:36;1760:13;1738:21;:36::i;:::-;1712:62;;1810:36;1832:13;1810:21;:36::i;:::-;1784:62;;1877:33;1894:15;1877:16;:33::i;:::-;1876:34;1856:54;;1941:33;1958:15;1941:16;:33::i;:::-;1940:34;1920:54;;2017:12;:28;;;;;2033:12;2017:28;2013:2585;;;2119:103;2133:13;:23;;;2158:13;:26;;;2194:4;2201:13;:20;;;2119:13;:103::i;:::-;2236;2250:13;:23;;;2275:13;:26;;;2311:4;2318:13;:20;;;2236:13;:103::i;:::-;2353:397;2383:13;:23;;;2424:13;:24;;;2466:13;:26;;;2510:13;:26;;;2554:13;:23;;;2595:13;:20;;;2633:13;:20;;;2671:13;:23;;;2712:13;:24;;;2353:12;:397::i;:::-;;2764;2794:13;:23;;;2835:13;:24;;;2877:13;:26;;;2921:13;:26;;;2965:13;:23;;;3006:13;:20;;;3044:13;:20;;;3082:13;:23;;;3123:13;:24;;;2764:12;:397::i;:::-;;2013:2585;;;3182:12;3178:1420;;;3251:103;3265:13;:23;;;3290:13;:26;;;3326:4;3333:13;:20;;;3251:13;:103::i;:::-;3368:397;3398:13;:23;;;3439:13;:24;;;3481:13;:26;;;3525:13;:26;;;3569:13;:23;;;3610:13;:20;;;3648:13;:20;;;3686:13;:23;;;3727:13;:24;;;3368:12;:397::i;:::-;;3779:95;3793:15;3810:13;:26;;;3838:13;:26;;;3866:7;;3779:95;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3779:13:2;;-1:-1:-1;;;;;3779:95:2:i;:::-;3178:1420;;;3895:12;3891:707;;;3964:103;3978:13;:23;;;4003:13;:26;;;4039:4;4046:13;:20;;;3964:13;:103::i;:::-;4081:397;4111:13;:23;;;4152:13;:24;;;4194:13;:26;;;4238:13;:26;;;4282:13;:23;;;4323:13;:20;;;4361:13;:20;;;4399:13;:23;;;4440:13;:24;;;4081:12;:397::i;:::-;;4492:95;4506:15;4523:13;:26;;;4551:13;:26;;;4579:7;;4492:95;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4492:13:2;;-1:-1:-1;;;;;4492:95:2:i;:::-;1429:3175;;;;;;;;;;;;;;:::o;6738:310:0:-;6848:1;6840:5;:9;:49;;;;-1:-1:-1;6862:18:0;;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;6853:36;;;6840:49;6832:58;;;;;;;;6938:18;;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;6930:43;;6967:5;6930:7;:43::i;:::-;6900:18;;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:73;;;6988:53;;;;;;;6900:27;;:18;;6988:53;;;;;;;;;;6738:310;;;:::o;5148:286::-;5243:1;5235:5;:9;:37;;;;-1:-1:-1;5257:15:0;;;;;;;:9;:15;;;;;;5248:24;;;5235:37;5227:46;;;;;;;;5309:15;;;;;;;:9;:15;;;;;;5301:31;;5326:5;5301:7;:31::i;:::-;5283:15;;;;;;;;:9;:15;;;;;;:49;;;;5366:13;;;;;;;5358:29;;5381:5;5358:7;:29::i;:::-;5342:13;;;;;;;;:9;:13;;;;;;;;;:45;;;;5402:25;;;;;;;5342:13;;5402:25;;;;;;;;;;;;;5148:286;;;:::o;5951:270::-;6061:1;6053:9;;6045:18;;;;;;6111;;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;6103:43;;6140:5;6103:7;:43::i;8644:987:2:-;8708:8;;:::i;:::-;8822:17;8876:18;8932:20;8990;9048:19;9135:13;9195:14;9248:17;9304:18;9361:17;8759:9;:16;8779:3;8759:23;8751:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8842:24;:9;8864:1;8842:24;:21;:24;:::i;:::-;8822:44;-1:-1:-1;8897:25:2;:9;8919:2;8897:25;:21;:25;:::i;:::-;8876:46;-1:-1:-1;8955:25:2;:9;8977:2;8955:25;:21;:25;:::i;:::-;8932:48;-1:-1:-1;9013:25:2;:9;9035:2;9013:25;:21;:25;:::i;:::-;8990:48;;9088:1;9071:18;;:9;9081:3;9071:14;;;;;;;;;;;;;;;;;;;;:18;;;;:53;;9109:15;9071:53;;;9092:14;9071:53;9048:77;-1:-1:-1;9158:26:2;:9;9180:3;9158:26;:21;:26;:::i;:::-;9151:34;-1:-1:-1;9212:26:2;:9;9234:3;9212:26;:21;:26;:::i;:::-;9195:43;-1:-1:-1;9268:26:2;:9;9290:3;9268:26;:21;:26;:::i;:::-;9248:46;-1:-1:-1;9325:26:2;:9;9347:3;9325:26;:21;:26;:::i;:::-;9304:47;-1:-1:-1;9381:26:2;:9;9403:3;9381:26;:21;:26;:::i;:::-;9361:46;;9424:200;;;;;;;;;9457:9;9424:200;;;;;;9480:10;9424:200;;;;;;9493:12;9424:200;;;;;;9507:12;9424:200;;;;;;9521:9;9424:200;;;;;;;;;;;;9544:6;9424:200;;;;9552:6;9424:200;;;;9560:9;9424:200;;;;9571:10;9424:200;;;;9583:1;9424:200;;;;9586:9;9424:200;;;;9597:17;9424:200;;;;;;;;;;9417:207;8644:987;-1:-1:-1;;;;;;;;;;;;8644:987:2:o;10108:412::-;10188:7;10207:17;10257:8;:18;;;10289:8;:19;;;10322:8;:21;;;10357:8;:21;;;10392:8;:18;;;10424:8;:15;;;10453:8;:18;;;10227:254;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;10227:254:2;;;10207:274;;10508:4;10498:15;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;139:12;;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;;254:3;250:22;246:30;;311:9;;295:26;;;340:21;;377:20;;;;365:33;;10498:15:2;;;;;;;;;;;;-1:-1:-1;;;;;;10108:412:2:o;9637:151::-;9706:4;9761:20;9729:22;;;;:10;:22;;;;;;;;:28;;;;;;:52;;;;;;;;;9637:151;-1:-1:-1;;9637:151:2:o;8071:237::-;8197:48;;;;;;:18;:48;;;;;;;;;;;;;;;;;;;;;;:18;;;;;;:48;;;;;;;;;;;;;;;-1:-1:-1;8197:18:2;:48;;;5:2:-1;;;;30:1;27;20:12;5:2;8197:48:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8197:48:2;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;8197:48:2;8176:125;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8071:237;;;;:::o;5556:1339::-;5848:18;6345:24;;:::i;:::-;5899:23;;;;;;;:51;;-1:-1:-1;5926:24:2;;;;;5899:51;:78;;;;;5967:10;5954:23;;:9;:23;;;;5899:78;5878:154;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6063:26;;;;;;;:56;;-1:-1:-1;6093:26:2;;;;;6063:56;:88;;;;;6139:12;6123:28;;:12;:28;;;;6063:88;6042:159;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6245:15;6232:9;:28;;;;;;;;;:59;;;-1:-1:-1;6277:14:2;6264:9;:27;;;;;;;;;6232:59;6211:124;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6372:194;;;;;;;;;6405:9;6372:194;;;;;;6428:10;6372:194;;;;;;6441:12;6372:194;;;;;;6455:12;6372:194;;;;;;6469:9;6372:194;;;;;;;;;;;;6492:6;6372:194;;;;6500:6;6372:194;;;;6508:9;6372:194;;;;6519:10;6372:194;;;;6531:1;6372:194;;;;6534:3;6372:194;;;;6539:17;6372:194;;;;;;;;;;6345:221;-1:-1:-1;6589:31:2;6345:221;6589:21;:31::i;:::-;6638:22;;;;:10;:22;;;;;:32;;;6576:44;;-1:-1:-1;6638:37:2;6630:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6713:22;;;;:10;:22;;;;;;;;;:33;;;;;;;;;;;;;;;;;;;-1:-1:-1;6713:33:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6713:33:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6839:9;6761:127;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5556:1339;;;;;;;;;;;;:::o;6901:1164::-;7060:25;7088:22;;;:10;:22;;;;;;7159:20;7141:14;;;;;;:38;;;;;;;;;7120:107;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7258:26;;;;;;;:56;;-1:-1:-1;7288:26:2;;;;;7258:56;:88;;;;;7334:12;7318:28;;:12;:28;;;;7258:88;7237:159;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7494:21;7507:7;7494:12;:21::i;:::-;7477:38;-1:-1:-1;7601:15:2;7579:18;;;;;;;;;:37;;;;;;;;;7575:406;;;;;;7773:14;7751:18;;;;;;;;;:36;;;;;;;;;7747:234;;;;;;7933:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7747:234;7995:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6901:1164;;;;;;:::o;503:208:5:-;589:7;633:6;;;;612:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;699:5:5;;;503:208::o;717:230::-;803:7;838:5;;;874:6;;;;853:69;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;939:1;717:230;-1:-1:-1;;;717:230:5:o;10269:886:4:-;10390:14;10453:5;10461:2;10453:10;10441:1;:8;:22;;10420:135;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11057:13:4;10802:2;11057:13;11051:20;11073:42;11047:69;;10269:886::o;13291:490::-;13412:14;13475:5;13483:2;13475:10;13463:1;:8;:22;;13442:107;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;13728:13:4;13630:2;13728:13;13722:20;;13291:490::o;14709:220::-;14830:14;14877:21;14889:1;14892:5;14877:11;:21::i;10526:197:2:-;10586:6;10669:2;10652:7;:14;:19;:64;;10693:22;:7;10713:1;10693:22;:19;:22;:::i;:::-;10652:64;;;10681:1;10652:64;10645:71;10526:197;-1:-1:-1;;10526:197:2:o;57:263:1:-;;;;;;;;;-1:-1:-1;57:263:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o"
			}
		}
	},
	"sources": {
		"src/RDXToken.sol": {
			"id": 1
		},
		"src/RoboDexToken.sol": {
			"id": 2
		},
		"@0x/contracts-utils/contracts/src/LibBytes.sol": {
			"id": 4
		},
		"src/ERC20Token.sol": {
			"id": 0
		},
		"@0x/contracts-utils/contracts/src/SafeMath.sol": {
			"id": 5
		},
		"src/interfaces/IERC20Token.sol": {
			"id": 3
		}
	},
	"sourceCodes": {
		"src/RDXToken.sol": "pragma solidity ^0.4.24;\n\nimport \"./RoboDexToken.sol\";\n\n\ncontract RDXToken is RoboDexToken {\n    // solhint-disable const-name-snakecase\n    uint8 constant public decimals = 18;\n    string constant public name = \"0x Protocol Token\";\n    string constant public symbol = \"RDX\";\n    // solhint-enable const-name-snakecase\n}\n",
		"src/RoboDexToken.sol": "pragma solidity ^0.4.24;\n\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"./ERC20Token.sol\";\n\n\ncontract RoboDexToken is ERC20Token {\n    using LibBytes for bytes;\n\n    // STRUCTURES\n\n    enum TradeType {\n        SHORT, // SELL\n        LONG   // BUY\n    }\n\n    enum PositionState {\n        NEW,\n        OPENED,\n        FILLED,\n        CLOSED\n    }\n\n    struct Position {\n        ERC20Token baseToken;\n        ERC20Token quoteToken;\n        address makerAddress;\n        address takerAddress;\n        TradeType tradeType;\n        int256 amount;\n        uint256 margin;\n        uint256 openPrice;\n        uint256 closePrice;\n        uint256 filled;\n        uint256 timestamp;\n        PositionState state;\n    }\n\n    // EVENTS\n\n    /// @dev Emits when position is opened.\n    event PositionOpened(\n        bytes32 positionId,\n        address baseToken,\n        address quoteToken,\n        address indexed makerAddress,\n        address indexed takerAddress,\n        TradeType indexed tradeType,\n        int256 amount,\n        uint256 margin,\n        uint256 openPrice,\n        uint256 closePrice\n    );\n\n    /// @dev Emits when position is closed.\n    event PositionClosed(\n        bytes32 positionId,\n        address indexed from,\n        address indexed to,\n        int256 amount\n    );\n    \n    // EXTERNAL FUNCTIONS\n\n    constructor() public {\n        _timeToLive = block.timestamp + INITIAL_LIFETIME;\n    }\n\n    function peddle(\n        bytes makerAssetData,\n        bytes takerAssetData,\n        bytes dexData\n    ) external returns (bool) {\n        Position memory makerPosition = parseAssetData(makerAssetData);\n        Position memory takerPosition = parseAssetData(takerAssetData);\n        bytes32 makerPositionId = calculatePositionHash(makerPosition);\n        bytes32 takerPositionId = calculatePositionHash(takerPosition);\n        bool makerOpening = !isPositionOpened(makerPositionId);\n        bool takerOpening = !isPositionOpened(takerPositionId);\n        // TODO: More checks\n        if (makerOpening && takerOpening) {\n            // Both maker and taker are opening positions\n            transferToken(makerPosition.baseToken, makerPosition.makerAddress, address(this), makerPosition.margin);\n            transferToken(takerPosition.baseToken, takerPosition.makerAddress, address(this), takerPosition.margin);\n            openPosition(\n                makerPosition.baseToken,\n                makerPosition.quoteToken,\n                makerPosition.makerAddress,\n                makerPosition.takerAddress,\n                makerPosition.tradeType,\n                makerPosition.amount,\n                makerPosition.margin,\n                makerPosition.openPrice,\n                makerPosition.closePrice\n            );\n            openPosition(\n                takerPosition.baseToken,\n                takerPosition.quoteToken,\n                takerPosition.makerAddress,\n                takerPosition.takerAddress,\n                takerPosition.tradeType,\n                takerPosition.amount,\n                takerPosition.margin,\n                takerPosition.openPrice,\n                takerPosition.closePrice\n            );\n        } else if (takerOpening) {\n            // Taker is opening position\n            transferToken(takerPosition.baseToken, takerPosition.makerAddress, address(this), takerPosition.margin);\n            openPosition(\n                takerPosition.baseToken,\n                takerPosition.quoteToken,\n                takerPosition.makerAddress,\n                takerPosition.takerAddress,\n                takerPosition.tradeType,\n                takerPosition.amount,\n                takerPosition.margin,\n                takerPosition.openPrice,\n                takerPosition.closePrice\n            );\n            closePosition(makerPositionId, makerPosition.makerAddress, takerPosition.makerAddress, dexData);\n        } else if (makerOpening) {\n            // Maker is opening position\n            transferToken(makerPosition.baseToken, makerPosition.makerAddress, address(this), makerPosition.margin);\n            openPosition(\n                makerPosition.baseToken,\n                makerPosition.quoteToken,\n                makerPosition.makerAddress,\n                makerPosition.takerAddress,\n                makerPosition.tradeType,\n                makerPosition.amount,\n                makerPosition.margin,\n                makerPosition.openPrice,\n                makerPosition.closePrice\n            );\n            closePosition(takerPositionId, takerPosition.makerAddress, makerPosition.makerAddress, dexData);\n        }\n    }\n\n    function getPositionInfo(bytes32 positionId) external view returns (\n        address baseToken,\n        address quoteToken,\n        address makerAddress,\n        address takerAddress,\n        TradeType tradeType,\n        int256 amount,\n        uint256 margin,\n        uint256 openPrice,\n        uint256 closePrice,\n        uint256 filled,\n        uint256 timestamp,\n        PositionState state\n    ) {\n        Position memory position = _positions[positionId];\n        baseToken = position.baseToken;\n        quoteToken = position.quoteToken;\n        makerAddress = position.makerAddress;\n        takerAddress = position.takerAddress;\n        tradeType = position.tradeType;\n        amount = position.amount;\n        margin = position.margin;\n        openPrice = position.openPrice;\n        closePrice = position.closePrice;\n        filled = position.filled;\n        timestamp = position.timestamp;\n        state = position.state;\n    }\n    \n    function openPosition(\n        address baseToken,\n        address quoteToken,\n        address makerAddress,\n        address takerAddress,\n        TradeType tradeType,\n        int256 amount,\n        uint256 margin,\n        uint256 openPrice,\n        uint256 closePrice\n    ) internal returns (bytes32 positionId) {\n        require(\n            baseToken != address(0) && quoteToken != address(0) && baseToken != quoteToken,\n            \"ERC20_TOKEN_ADDRESSES_INVALID\"\n        );\n        require(\n            makerAddress != address(0) && takerAddress != address(0) && makerAddress != takerAddress,\n            \"TRADER_ADDRESSES_INVALID\"\n        );\n        require(\n            tradeType == TradeType.SHORT || tradeType == TradeType.LONG,\n            \"TRADE_TYPE_INVALID\"\n        );\n        Position memory position = Position(\n            ERC20Token(baseToken), ERC20Token(quoteToken), makerAddress, takerAddress, tradeType,\n            amount, margin, openPrice, closePrice, 0, now, PositionState.NEW\n        );\n        positionId = calculatePositionHash(position);\n        require(_positions[positionId].timestamp == 0, \"POSITION_ALREADY_OPENED\");\n        _positions[positionId] = position;\n        emit PositionOpened(positionId, baseToken, quoteToken, makerAddress, takerAddress, tradeType, amount, margin, openPrice, closePrice);\n    }\n\n    function closePosition(\n        bytes32 positionId,\n        address makerAddress,\n        address takerAddress,\n        bytes dexData\n    ) internal {\n        Position storage position = _positions[positionId];\n        require(\n            position.state == PositionState.OPENED,\n            \"POSITION_IS_NOT_OPENED\"\n        );\n        require(\n            makerAddress != address(0) && takerAddress != address(0) && makerAddress != takerAddress,\n            \"TRADER_ADDRESSES_INVALID\"\n        );\n        // TODO: Add more checks (makerAddress, takerAddress, dexData)\n        int256 balance = calculatePNL(dexData);\n        // TODO: Liquidate trades in the position\n        if (position.tradeType == TradeType.SHORT) {\n            // TODO\n            //transferTokenSigned(position.baseToken, makerAddress, takerAddress, balance);\n        } else if (position.tradeType == TradeType.LONG) {\n            // TODO\n            //transferTokenSigned(position.quoteToken, makerAddress, takerAddress, balance);\n        } else {\n            revert(\"POSITION_TRADE_TYPE_INVALID\");\n        }\n        emit PositionClosed(positionId, makerAddress, takerAddress, balance);\n    }\n\n    function transferToken(ERC20Token token, address payer, address payee, uint256 value) internal {\n        require(\n            token.transferFrom(payer, payee, uint256(value)),\n            \"UNABLE_TO_TRANSFER_ERC20_TOKEN\"\n        );\n    }\n\n    function transferTokenSigned(ERC20Token token, address payer, address payee, int256 value) internal {\n        // TODO: ???\n        if (value > 0) {\n            transferToken(token, payer, payee, uint256(value));\n        } else if (value < 0) {\n            transferToken(token, payee, payer, uint256(-value));\n        }\n    }\n\n    function parseAssetData(bytes assetData) internal pure returns (Position) {\n        // TODO: Check\n        require(assetData.length == 320, \"INVALID_ASSET_DATA_LENGTH\");\n        address baseToken = assetData.readAddress(0);\n        address quoteToken = assetData.readAddress(32);\n        address makerAddress = assetData.readAddress(64);\n        address takerAddress = assetData.readAddress(96);\n        TradeType tradeType = (assetData[159] > 0 ? TradeType.LONG : TradeType.SHORT);\n        int256 amount = int256(assetData.readBytes32(160));\n        uint256 margin = assetData.readUint256(192);\n        uint256 openPrice = assetData.readUint256(224);\n        uint256 closePrice = assetData.readUint256(256);\n        uint256 timestamp = assetData.readUint256(288);\n        return Position(\n            ERC20Token(baseToken), ERC20Token(quoteToken), makerAddress, takerAddress, tradeType,\n            amount, margin, openPrice, closePrice, 0, timestamp, PositionState.NEW\n        );\n    }\n\n    function isPositionOpened(bytes32 positionId) internal view returns (bool) {\n        return _positions[positionId].state == PositionState.OPENED;\n    }\n\n    function isPositionFilled(bytes32 positionId) internal view returns (bool) {\n        return _positions[positionId].state == PositionState.FILLED;\n    }\n\n    function isPositionClosed(bytes32 positionId) internal view returns (bool) {\n        return _positions[positionId].state == PositionState.CLOSED;\n    }\n\n    function calculatePositionHash(Position memory position) internal pure returns (bytes32) {\n        bytes memory data = abi.encodePacked(\n            position.baseToken,\n            position.quoteToken,\n            position.makerAddress,\n            position.takerAddress,\n            position.tradeType,\n            position.amount,\n            position.timestamp\n        );\n        return keccak256(data);\n    }\n\n    function calculatePNL(bytes dexData) internal pure returns (int256) {\n        // TODO: Calculate PNL carefully\n        return dexData.length < 32 ? int256(0) : int256(dexData.readBytes32(0));\n    }\n\n    // FIELDS\n\n    // Storage of open positions\n    mapping (bytes32 => Position) internal _positions;\n\n    // Storage of all known position IDs by account\n    mapping (address => mapping (uint64 => bytes32)) internal _positionHashes;\n    mapping (address => uint64) internal _positionHashesCounts;\n\n    // TTL which is not used yet\n    uint256 internal _timeToLive;\n\n    uint256 private constant INITIAL_LIFETIME = 21 days;\n}\n",
		"@0x/contracts-utils/contracts/src/LibBytes.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\n\nlibrary LibBytes {\n\n    using LibBytes for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n    \n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n                    \n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n                    \n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        require(\n            from <= to,\n            \"FROM_LESS_THAN_TO_REQUIRED\"\n        );\n        require(\n            to < b.length,\n            \"TO_LESS_THAN_LENGTH_REQUIRED\"\n        );\n        \n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n    \n    /// @dev Returns a slice from a byte array without preserving the input.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    /// @dev When `from == 0`, the original array will match the slice. In other cases its state will be corrupted.\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        require(\n            from <= to,\n            \"FROM_LESS_THAN_TO_REQUIRED\"\n        );\n        require(\n            to < b.length,\n            \"TO_LESS_THAN_LENGTH_REQUIRED\"\n        );\n        \n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        require(\n            b.length > 0,\n            \"GREATER_THAN_ZERO_LENGTH_REQUIRED\"\n        );\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Pops the last 20 bytes off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The 20 byte address that was popped off.\n    function popLast20Bytes(bytes memory b)\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= 20,\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\n        );\n\n        // Store last 20 bytes.\n        result = readAddress(b, b.length - 20);\n\n        assembly {\n            // Subtract 20 from byte array length.\n            let newLen := sub(mload(b), 20)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n            \n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        require(\n            b.length >= index + 32,\n            \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\"\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 32,\n            \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\"\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        require(\n            b.length >= index + 4,\n            \"GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED\"\n        );\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Reads nested bytes from a specific position.\n    /// @dev NOTE: the returned value overlaps with the input value.\n    ///            Both should be treated as immutable.\n    /// @param b Byte array containing nested bytes.\n    /// @param index Index of nested bytes.\n    /// @return result Nested bytes.\n    function readBytesWithLength(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Read length of nested bytes\n        uint256 nestedBytesLength = readUint256(b, index);\n        index += 32;\n\n        // Assert length of <b> is valid, given\n        // length of nested bytes\n        require(\n            b.length >= index + nestedBytesLength,\n            \"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\"\n        );\n        \n        // Return a pointer to the byte array as it exists inside `b`\n        assembly {\n            result := add(b, index)\n        }\n        return result;\n    }\n\n    /// @dev Inserts bytes at a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes to insert.\n    function writeBytesWithLength(\n        bytes memory b,\n        uint256 index,\n        bytes memory input\n    )\n        internal\n        pure\n    {\n        // Assert length of <b> is valid, given\n        // length of input\n        require(\n            b.length >= index + 32 + input.length,  // 32 bytes to store length\n            \"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\"\n        );\n\n        // Copy <input> into <b>\n        memCopy(\n            b.contentAddress() + index,\n            input.rawAddress(), // includes length of <input>\n            input.length + 32   // +32 bytes to store <input> length\n        );\n    }\n\n    /// @dev Performs a deep copy of a byte array onto another byte array of greater than or equal length.\n    /// @param dest Byte array that will be overwritten with source bytes.\n    /// @param source Byte array to copy onto dest bytes.\n    function deepCopyBytes(\n        bytes memory dest,\n        bytes memory source\n    )\n        internal\n        pure\n    {\n        uint256 sourceLen = source.length;\n        // Dest length must be >= source length, or some bytes would not be copied.\n        require(\n            dest.length >= sourceLen,\n            \"GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED\"\n        );\n        memCopy(\n            dest.contentAddress(),\n            source.contentAddress(),\n            sourceLen\n        );\n    }\n}\n",
		"src/ERC20Token.sol": "pragma solidity ^0.4.24;\n\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"@0x/contracts-utils/contracts/src/SafeMath.sol\";\nimport \"./interfaces/IERC20Token.sol\";\n\n\ncontract ERC20Token is IERC20Token, SafeMath {\n    using LibBytes for bytes;\n\n    // EXTERNAL FUNCTIONS\n\n    constructor() public {\n        _totalSupply = INITIAL_SUPPLY;\n        _balances[msg.sender] = _totalSupply;\n        emit Transfer(address(0), msg.sender, _totalSupply);\n    }\n\n    /// @dev Sends `value` amount of tokens to account `to` from account `msg.sender`.\n    /// @param to The address of the tokens recipient.\n    /// @param value The amount of tokens to be transferred.\n    /// @return True if transfer was successful.\n    function transfer(address to, uint256 value) external returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /// @dev Sends `value` amount of tokens to account `to` from account `from` if enough amount of\n    /// tokens are approved by account `from` to spend by account `msg.sender`.\n    /// @param from The address of the tokens sender.\n    /// @param to The address of the tokens recipient.\n    /// @param value The amount of tokens to be transferred.\n    /// @return True if transfer was successful.\n    function transferFrom(address from, address to, uint256 value) external returns (bool) {\n        _decreaseAllowance(from, msg.sender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /// @dev Approves account with address `spender` to spend `value` amount of tokens on behalf of account `msg.sender`.\n    /// Beware that changing an allowance with this method brings the risk that someone may use both the old\n    /// and the new allowance by an unfortunate transaction ordering. One possible solution to mitigate this\n    /// rare condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n    /// https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    /// @param spender Address which will be allowed to spend the tokens.\n    /// @param value Amount of tokens to allow to be spent.\n    /// @return True if approve was successful.\n    function approve(address spender, uint256 value) external returns (bool) {\n        _allowances[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /// @dev Increases the amount of tokens that account `msg.sender` allowed to spend by account `spender`.\n    /// Method approve() should be called when _allowances[spender] == 0. To decrement allowance\n    /// it is better to use this function to avoid 2 calls (and waiting until the first transaction is mined).\n    /// @param spender The address from which the tokens can be spent.\n    /// @param value The amount of tokens to increase the allowance by.\n    /// @return True if approve was successful.\n    function increaseAllowance(address spender, uint256 value) external returns (bool) {\n        require(spender != address(0));\n        _increaseAllowance(msg.sender, spender, value);\n        return true;\n    }\n\n    /// @dev Decreases the amount of tokens that account `msg.sender` allowed to spend by account `spender`.\n    /// Method approve() should be called when _allowances[spender] == 0. To decrement allowance\n    /// it is better to use this function to avoid 2 calls (and waiting until the first transaction is mined).\n    /// @param spender The address from which the tokens can be spent.\n    /// @param value The amount of tokens to decrease the allowance by.\n    /// @return True if approve was successful.\n    function decreaseAllowance(address spender, uint256 value) external returns (bool) {\n        require(spender != address(0));\n        _decreaseAllowance(msg.sender, spender, value);\n        return true;\n    }\n\n    // EXTERNAL FUNCTIONS (VIEW)\n\n    /// @dev Returns total amount of supplied tokens.\n    /// @return Total amount of supplied tokens.\n    function totalSupply() external view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /// @dev Returns the balance of account with address `owner`.\n    /// @param owner The address from which the balance will be retrieved.\n    /// @return Amount of tokens hold by account with address `owner`.\n    function balanceOf(address owner) external view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /// @dev Returns the amount of tokens hold by account `owner` and approved to spend by account `spender`.\n    /// @param owner The address of the account owning tokens.\n    /// @param spender The address of the account able to transfer the tokens owning by account `owner`.\n    /// @return Amount of tokens allowed to spend.\n    function allowance(address owner, address spender) external view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    // INTERNAL FUNCTIONS\n\n    /// @dev Transfers tokens from account with address `from` to account with address `to`.\n    /// @param from The address of the tokens sender.\n    /// @param to The address of the tokens recipient.\n    /// @param value The amount of tokens to be transferred.\n    function _transfer(address from, address to, uint256 value) internal {\n        require(value > 0 && value <= _balances[from]);\n        _balances[from] = safeSub(_balances[from], value);\n        _balances[to] = safeAdd(_balances[to], value);\n        emit Transfer(from, to, value);\n    }\n\n    /// @dev Increases the amount of tokens that account `owner` allowed to spend by account `spender`.\n    /// Method approve() should be called when _allowances[spender] == 0. To decrement allowance\n    /// it is better to use this function to avoid 2 calls (and waiting until the first transaction is mined).\n    /// @param owner The address which owns the tokens.\n    /// @param spender The address from which the tokens can be spent.\n    /// @param value The amount of tokens to increase the allowance by.\n    function _increaseAllowance(address owner, address spender, uint256 value) internal {\n        require(value > 0);\n        _allowances[owner][spender] = safeAdd(_allowances[owner][spender], value);\n        emit Approval(owner, spender, _allowances[owner][spender]);\n    }\n\n    /// @dev Decreases the amount of tokens that account `owner` allowed to spend by account `spender`.\n    /// Method approve() should be called when _allowances[spender] == 0. To decrement allowance\n    /// it is better to use this function to avoid 2 calls (and waiting until the first transaction is mined).\n    /// @param owner The address which owns the tokens.\n    /// @param spender The address from which the tokens can be spent.\n    /// @param value The amount of tokens to decrease the allowance by.\n    function _decreaseAllowance(address owner, address spender, uint256 value) internal {\n        require(value > 0 && value <= _allowances[owner][spender]);\n        _allowances[owner][spender] = safeSub(_allowances[owner][spender], value);\n        emit Approval(owner, spender, _allowances[owner][spender]);\n    }\n\n    /// @dev Internal function that mints specified amount of tokens and assigns it to account `receiver`.\n    /// This encapsulates the modification of balances such that the proper events are emitted.\n    /// @param receiver The address that will receive the minted tokens.\n    /// @param value The amount of tokens that will be minted.\n    function _mint(address receiver, uint256 value) internal {\n        require(receiver != address(0));\n        require(value > 0);\n        _balances[receiver] = safeAdd(_balances[receiver], value);\n        _totalSupply = safeAdd(_totalSupply, value);\n        emit Transfer(address(0), receiver, value);\n    }\n\n    /// @dev Internal function that burns specified amount of tokens of a given address.\n    /// @param burner The address from which tokens will be burnt.\n    /// @param value The amount of tokens that will be burnt.\n    function _burn(address burner, uint256 value) internal {\n        require(burner != address(0));\n        require(value > 0 && value <= _balances[burner]);\n        _balances[burner] = safeSub(_balances[burner], value);\n        _totalSupply = safeSub(_totalSupply, value);\n        emit Transfer(burner, address(0), value);\n    }\n\n    // FIELDS\n\n    uint256 internal _totalSupply;\n    mapping (address => uint256) internal _balances;\n    mapping (address => mapping (address => uint256)) internal _allowances;\n\n    // Amount of initially supplied tokens is constant and equals to 1,000,000,000\n    uint256 private constant INITIAL_SUPPLY = 10**27;\n}\n",
		"@0x/contracts-utils/contracts/src/SafeMath.sol": "pragma solidity ^0.4.24;\n\n\ncontract SafeMath {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(\n            c / a == b,\n            \"UINT256_OVERFLOW\"\n        );\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        require(\n            b <= a,\n            \"UINT256_UNDERFLOW\"\n        );\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        require(\n            c >= a,\n            \"UINT256_OVERFLOW\"\n        );\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}\n",
		"src/interfaces/IERC20Token.sol": "pragma solidity ^0.4.24;\n\n\ncontract IERC20Token {\n\n    // EVENTS\n\n    /// @dev Emits when ownership of any tokens changes by any mechanism.\n    /// This event also emits when tokens are created (`from` == 0) and destroyed (`to` == 0).\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    \n    /// @dev Emits when the approved address for a tokens is changed or reaffirmed.\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    // EXTERNAL FUNCTIONS\n\n    /// @dev Sends `value` amount of tokens to account `to` from account `msg.sender`.\n    /// @param to The address of the tokens recipient.\n    /// @param value The amount of tokens to be transferred.\n    /// @return True if transfer was successful.\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /// @dev Sends `value` amount of tokens to account `to` from account `from` if enough amount of\n    /// tokens are approved by account `from` to spend by account `msg.sender`.\n    /// @param from The address of the tokens sender.\n    /// @param to The address of the tokens recipient.\n    /// @param value The amount of tokens to be transferred.\n    /// @return True if transfer was successful.\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n    \n    /// @dev Approves account `spender` by account `msg.sender` to spend `value` amount of tokens.\n    /// @param spender The address of the account able to transfer the tokens.\n    /// @param value The new amount of tokens to be approved for transfer.\n    /// @return True if approve was successful.\n    function approve(address spender, uint256 value) external returns (bool);\n\n    // EXTERNAL FUNCTIONS (VIEW)\n\n    /// @dev Returns total amount of supplied tokens.\n    /// @return Total amount of supplied tokens.\n    function totalSupply() external view returns (uint256);\n    \n    /// @dev Returns the balance of account with address `owner`.\n    /// @param owner The address from which the balance will be retrieved.\n    /// @return Amount of tokens hold by account with address `owner`.\n    function balanceOf(address owner) external view returns (uint256);\n\n    /// @dev Returns the amount of tokens hold by account `owner` and approved to spend by account `spender`.\n    /// @param owner The address of the account owning tokens.\n    /// @param spender The address of the account able to transfer the tokens owning by account `owner`.\n    /// @return Amount of tokens allowed to spend.\n    function allowance(address owner, address spender) external view returns (uint256);\n}\n"
	},
	"sourceTreeHashHex": "0x0f7383fb64035840567622dddea12a949b75dde775e3ad5f4a89e5b2d824ea10",
	"compiler": {
		"name": "solc",
		"version": "0.4.25+commit.59dbf8f1.Linux.g++",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 1000000
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			},
			"remappings": [
				"@0x/contracts-utils=/Users/wardencliffe/Documents/Projects/Personal/0x-monorepo-mirror/node_modules/@0x/contracts-utils"
			]
		}
	},
	"networks": {}
}