{
	"schemaVersion": "2.0.0",
	"contractName": "RDXToken",
	"compilerOutput": {
		"abi": [
			{
				"constant": true,
				"inputs": [
					{
						"name": "maker",
						"type": "address"
					}
				],
				"name": "getPositionCount",
				"outputs": [
					{
						"name": "",
						"type": "uint64"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"name": "",
						"type": "string"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "spender",
						"type": "address"
					},
					{
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "positionHash",
						"type": "bytes32"
					}
				],
				"name": "getPosition",
				"outputs": [
					{
						"name": "token",
						"type": "address"
					},
					{
						"name": "maker",
						"type": "address"
					},
					{
						"name": "taker",
						"type": "address"
					},
					{
						"name": "tradeType",
						"type": "uint8"
					},
					{
						"name": "amount",
						"type": "uint256"
					},
					{
						"name": "margin",
						"type": "uint256"
					},
					{
						"name": "openPrice",
						"type": "uint256"
					},
					{
						"name": "closePrice",
						"type": "uint256"
					},
					{
						"name": "filled",
						"type": "uint256"
					},
					{
						"name": "timestamp",
						"type": "uint256"
					},
					{
						"name": "state",
						"type": "uint8"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "from",
						"type": "address"
					},
					{
						"name": "to",
						"type": "address"
					},
					{
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "decimals",
				"outputs": [
					{
						"name": "",
						"type": "uint8"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "spender",
						"type": "address"
					},
					{
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "increaseAllowance",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "owner",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"name": "",
						"type": "string"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "spender",
						"type": "address"
					},
					{
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "decreaseAllowance",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "to",
						"type": "address"
					},
					{
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "transfer",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "owner",
						"type": "address"
					},
					{
						"name": "spender",
						"type": "address"
					}
				],
				"name": "allowance",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "maker",
						"type": "address"
					},
					{
						"name": "index",
						"type": "uint64"
					}
				],
				"name": "getPositionHash",
				"outputs": [
					{
						"name": "",
						"type": "bytes32"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "from",
						"type": "address"
					},
					{
						"name": "to",
						"type": "address"
					},
					{
						"name": "amount",
						"type": "uint256"
					},
					{
						"name": "positionData",
						"type": "bytes"
					},
					{
						"name": "dexData",
						"type": "bytes"
					}
				],
				"name": "peddle",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"name": "id",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"name": "token",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "maker",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "taker",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "tradeType",
						"type": "uint8"
					},
					{
						"indexed": false,
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"name": "margin",
						"type": "uint256"
					},
					{
						"indexed": false,
						"name": "openPrice",
						"type": "uint256"
					},
					{
						"indexed": false,
						"name": "closePrice",
						"type": "uint256"
					}
				],
				"name": "PositionOpened",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"name": "id",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"name": "token",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "maker",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "taker",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "tradeType",
						"type": "uint8"
					},
					{
						"indexed": false,
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"name": "margin",
						"type": "uint256"
					},
					{
						"indexed": false,
						"name": "filled",
						"type": "uint256"
					}
				],
				"name": "PositionFilled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"name": "id",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"name": "token",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "maker",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "taker",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "tradeType",
						"type": "uint8"
					},
					{
						"indexed": false,
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"name": "margin",
						"type": "uint256"
					},
					{
						"indexed": false,
						"name": "filled",
						"type": "uint256"
					},
					{
						"indexed": false,
						"name": "pnl",
						"type": "int256"
					}
				],
				"name": "PositionClosed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			}
		],
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x608060408181526b033b2e3c9fd0803ce800000060008181553380825260016020908152938220839055918452909290917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a342621baf800160065561231f8061006b6000396000f3006080604052600436106100da5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630234b44581146100df57806306fdde031461012a578063095ea7b3146101b457806318160ddd146101f95780631928b3cb1461022057806323b872dd146102cd578063313ce56714610304578063395093511461032f57806370a082311461036057806395d89b411461038e578063a457c2d7146103a3578063a9059cbb146103d4578063dd62ed3e14610405578063e33278ba14610439578063e43926f814610474575b600080fd5b3480156100eb57600080fd5b5061010d73ffffffffffffffffffffffffffffffffffffffff600435166104c6565b6040805167ffffffffffffffff9092168252519081900360200190f35b34801561013657600080fd5b5061013f6104f8565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610179578181015183820152602001610161565b50505050905090810190601f1680156101a65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101c057600080fd5b506101e573ffffffffffffffffffffffffffffffffffffffff6004351660243561052f565b604080519115158252519081900360200190f35b34801561020557600080fd5b5061020e6105a2565b60408051918252519081900360200190f35b34801561022c57600080fd5b506102386004356105a8565b6040805173ffffffffffffffffffffffffffffffffffffffff808e1682528c811660208301528b16918101919091526060810189600181111561027757fe5b60ff1681526020018881526020018781526020018681526020018581526020018481526020018381526020018260048111156102af57fe5b60ff1681526020019b50505050505050505050505060405180910390f35b3480156102d957600080fd5b506101e573ffffffffffffffffffffffffffffffffffffffff60043581169060243516604435610716565b34801561031057600080fd5b50610319610738565b6040805160ff9092168252519081900360200190f35b34801561033b57600080fd5b506101e573ffffffffffffffffffffffffffffffffffffffff6004351660243561073d565b34801561036c57600080fd5b5061020e73ffffffffffffffffffffffffffffffffffffffff60043516610775565b34801561039a57600080fd5b5061013f61079d565b3480156103af57600080fd5b506101e573ffffffffffffffffffffffffffffffffffffffff600435166024356107d4565b3480156103e057600080fd5b506101e573ffffffffffffffffffffffffffffffffffffffff60043516602435610803565b34801561041157600080fd5b5061020e73ffffffffffffffffffffffffffffffffffffffff60043581169060243516610810565b34801561044557600080fd5b5061020e73ffffffffffffffffffffffffffffffffffffffff6004351667ffffffffffffffff60243516610848565b34801561048057600080fd5b506101e573ffffffffffffffffffffffffffffffffffffffff60048035821691602480359091169160443591606435808201929081013591608435908101910135610889565b73ffffffffffffffffffffffffffffffffffffffff1660009081526005602052604090205467ffffffffffffffff1690565b60408051808201909152601181527f30782050726f746f636f6c20546f6b656e000000000000000000000000000000602082015281565b33600081815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60005490565b60008060008060008060008060008060006105c161228f565b60008d815260036020908152604091829020825161016081018452815473ffffffffffffffffffffffffffffffffffffffff9081168252600180840154821694830194909452600283015490811694820194909452929091606084019174010000000000000000000000000000000000000000900460ff169081111561064357fe5b600181111561064e57fe5b81526003820154602082015260048083015460408301526005830154606083015260068301546080830152600783015460a0830152600883015460c0830152600983015460e09092019160ff16908111156106a557fe5b60048111156106b057fe5b81525050905080600001519b5080602001519a508060400151995080606001519850806080015197508060a0015196508060c0015195508060e0015194508061010001519350806101200151925080610140015191505091939597999b90929496989a50565b6000610723843384610c39565b61072e848484610d36565b5060019392505050565b601281565b600073ffffffffffffffffffffffffffffffffffffffff8316151561076157600080fd5b61076c338484610e4b565b50600192915050565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205490565b60408051808201909152600381527f5244580000000000000000000000000000000000000000000000000000000000602082015281565b600073ffffffffffffffffffffffffffffffffffffffff831615156107f857600080fd5b61076c338484610c39565b600061076c338484610d36565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260026020908152604080832093909416825291909152205490565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260046020908152604080832067ffffffffffffffff8516845290915290205492915050565b600061089361228f565b6000806000806108d28a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843750610e95945050505050565b9450846020015173ffffffffffffffffffffffffffffffffffffffff168d73ffffffffffffffffffffffffffffffffffffffff16141561092d5773ffffffffffffffffffffffffffffffffffffffff8c1660408601526109f5565b846020015173ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff16141561098e5773ffffffffffffffffffffffffffffffffffffffff808e1660208701528c1660408601526109f5565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f494e56414c49445f43414c4c5f46524f4d5f41535345545f50524f5859000000604482015290519081900360640190fd5b6109fe8561122e565b93506000808581526003602052604090206009015460ff166004811115610a2157fe5b14610b1b57600084815260036020908152604091829020825161016081018452815473ffffffffffffffffffffffffffffffffffffffff9081168252600180840154821694830194909452600283015490811694820194909452929091606084019174010000000000000000000000000000000000000000900460ff1690811115610aa857fe5b6001811115610ab357fe5b81526003820154602082015260048083015460408301526005830154606083015260068301546080830152600783015460a0830152600883015460c0830152600983015460e09092019160ff1690811115610b0a57fe5b6004811115610b1557fe5b90525094505b610b2a8561010001518c61142c565b6080860151909350831115610ba057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f494e56414c49445f41535345545f414d4f554e54000000000000000000000000604482015290519081900360640190fd5b50506080830151818a149082148115610bda57610bcb85600001518660200151308860a001516114a7565b610bd58486611582565b610c26565b8015610c1b57610bd584868a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843750611b2c945050505050565b610c26848685611ca1565b5060019c9b505050505050505050505050565b600081118015610c7b575073ffffffffffffffffffffffffffffffffffffffff8084166000908152600260209081526040808320938616835292905220548111155b1515610c8657600080fd5b73ffffffffffffffffffffffffffffffffffffffff808416600090815260026020908152604080832093861683529290522054610cc39082612011565b73ffffffffffffffffffffffffffffffffffffffff84811660008181526002602090815260408083209488168084529482529182902085905581519485529051929391927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b600081118015610d6b575073ffffffffffffffffffffffffffffffffffffffff83166000908152600160205260409020548111155b1515610d7657600080fd5b73ffffffffffffffffffffffffffffffffffffffff8316600090815260016020526040902054610da69082612011565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152600160205260408082209390935590841681522054610de2908261142c565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008111610e5857600080fd5b73ffffffffffffffffffffffffffffffffffffffff808416600090815260026020908152604080832093861683529290522054610cc3908261142c565b610e9d61228f565b6000806000806000806000885160e0141515610f1a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f494e56414c49445f504f534954494f4e5f444154415f4c454e47544800000000604482015290519081900360640190fd5b610f2b89600c63ffffffff61208816565b9650610f3e89602c63ffffffff61208816565b955060007f01000000000000000000000000000000000000000000000000000000000000000289605f815181101515610f7357fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191611610fec576000610fef565b60015b945061100289606063ffffffff61214416565b935061101589608063ffffffff61214416565b92506110288960a063ffffffff61214416565b915061103b8960c063ffffffff61214416565b905073ffffffffffffffffffffffffffffffffffffffff871615801590611077575073ffffffffffffffffffffffffffffffffffffffff861615155b15156110e457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f494e56414c49445f504f534954494f4e5f444154415f41444452455353455300604482015290519081900360640190fd5b6000841180156110f45750600083115b80156111005750600082115b801561110c5750600081115b151561117957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f494e56414c49445f504f534954494f4e5f444154415f56414c55455300000000604482015290519081900360640190fd5b610160604051908101604052808873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020018660018111156111e757fe5b815260200185815260200184815260200183815260200182815260200160008152602001600081526020016000600481111561121f57fe5b90529998505050505050505050565b60006060826000015183602001518460400151856060015186608001518760a001518860c001518960e00151604051602001808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140186600181111561133057fe5b60ff167f0100000000000000000000000000000000000000000000000000000000000000028152600101858152602001848152602001838152602001828152602001985050505050505050506040516020818303038152906040529050806040518082805190602001908083835b602083106113db57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161139e565b5181516020939093036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018019909116921691909117905260405192018290039091209695505050505050565b6000828201838110156114a057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f55494e543235365f4f564552464c4f5700000000000000000000000000000000604482015290519081900360640190fd5b9392505050565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081528360048201528260248201528160448201526020816064836000895af1600082511160203d14163d1517811690506064820160405280151561157a577f08c379a0000000000000000000000000000000000000000000000000000000006000527c20000000000000000000000000000000000000000000000000000000006020527c0f5452414e534645525f4641494c454400000000000000000000000000604052600060605260646000fd5b505050505050565b600061158d82612150565b80156115a85750600083815260036020526040902060080154155b151561161557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f504f534954494f4e5f414c52454144595f4f50454e4544000000000000000000604482015290519081900360640190fd5b815173ffffffffffffffffffffffffffffffffffffffff16151561169a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f494e56414c49445f45524332305f544f4b454e5f414444524553530000000000604482015290519081900360640190fd5b602082015173ffffffffffffffffffffffffffffffffffffffff16158015906116dc5750604082015173ffffffffffffffffffffffffffffffffffffffff1615155b801561171c5750816040015173ffffffffffffffffffffffffffffffffffffffff16826020015173ffffffffffffffffffffffffffffffffffffffff1614155b151561178957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f494e56414c49445f5452414445525f4144445245535345530000000000000000604482015290519081900360640190fd5b60008260600151600181111561179b57fe5b14806117b657506001826060015160018111156117b457fe5b145b151561182357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f494e56414c49445f54524144455f545950450000000000000000000000000000604482015290519081900360640190fd5b600083815260036020908152604091829020845181547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff928316178355928601516001808401805486169284169290921790915593860151600283018054909416911617808355606086015186949293909290917fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690740100000000000000000000000000000000000000009084908111156118f457fe5b02179055506080820151816003015560a0820151816004015560c0820151816005015560e08201518160060155610100820151816007015561012082015181600801556101408201518160090160006101000a81548160ff0219169083600481111561195c57fe5b0217905550505060008381526003602052604090204260088201556009018054600191907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001682800217905550506020818101805173ffffffffffffffffffffffffffffffffffffffff908116600090815260058085526040808320548551851684526004875281842067ffffffffffffffff9182168086529088528285208a90559551909416835294529290922080547fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000016600180840190941617905560608301519091811115611a4a57fe5b826040015173ffffffffffffffffffffffffffffffffffffffff16836020015173ffffffffffffffffffffffffffffffffffffffff167f08966dc2a47cfbf91782defa097cf9709f35196d3371500cb776528fbd10162a86866000015187608001518860a001518960c001518a60e001516040518087600019166000191681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001838152602001828152602001965050505050505060405180910390a4505050565b6000611b378361216c565b15611ba357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f504f534954494f4e5f414c52454144595f434c4f534544000000000000000000604482015290519081900360640190fd5b611bac82612175565b9050611bc68360000151846020015185604001518461219f565b600084815260036020526040902060090180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600417905560608301516001811115611c1057fe5b60408085015160208087015187516080808a015160a0808c01516101008d015189518f815273ffffffffffffffffffffffffffffffffffffffff96871698810198909852878a0193909352606087015291850152830187905293519284169316917f35f7a761114483bbd7c089132b621da2325015070fb46d26442093086b6676739181900360c00190a450505050565b611caa826121d7565b80611cb95750611cb9826121e0565b1515611d2657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f504f534954494f4e5f414c52454144595f4f50454e4544000000000000000000604482015290519081900360640190fd5b815173ffffffffffffffffffffffffffffffffffffffff161515611dab57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f494e56414c49445f45524332305f544f4b454e5f414444524553530000000000604482015290519081900360640190fd5b602082015173ffffffffffffffffffffffffffffffffffffffff1615801590611ded5750604082015173ffffffffffffffffffffffffffffffffffffffff1615155b8015611e2d5750816040015173ffffffffffffffffffffffffffffffffffffffff16826020015173ffffffffffffffffffffffffffffffffffffffff1614155b1515611e9a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f494e56414c49445f5452414445525f4144445245535345530000000000000000604482015290519081900360640190fd5b600082606001516001811115611eac57fe5b1480611ec75750600182606001516001811115611ec557fe5b145b1515611f3457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f494e56414c49445f54524144455f545950450000000000000000000000000000604482015290519081900360640190fd5b60008381526003602052604090206007810182905560090180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600217905560608201516001811115611f8557fe5b604080840151602080860151865160808089015160a0808b01516101008c015189518e815273ffffffffffffffffffffffffffffffffffffffff96871698810198909852878a01939093526060870152918501529451938116949116927fce97a5a77a419598c6f287194fca925e3bff579c4db6b9fa1a7adad422e60fd09281900390910190a4505050565b60008282111561208257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f55494e543235365f554e444552464c4f57000000000000000000000000000000604482015290519081900360640190fd5b50900390565b60008160140183511015151561212557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f475245415445525f4f525f455155414c5f544f5f32305f4c454e4754485f524560448201527f5155495245440000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b50016014015173ffffffffffffffffffffffffffffffffffffffff1690565b60006114a083836121e9565b6000805b826101400151600481111561216557fe5b1492915050565b60006004612154565b600060208251106121965761219182600063ffffffff6121e916565b612199565b60005b92915050565b60008113156121b9576121b4848484846114a7565b6121d1565b60008112156121d1576121d1848385846000036114a7565b50505050565b60006001612154565b60006002612154565b60008160200183511015151561228657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f475245415445525f4f525f455155414c5f544f5f33325f4c454e4754485f524560448201527f5155495245440000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b50016020015190565b60408051610160810182526000808252602082018190529181018290529060608201908152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600060048111156122ee57fe5b9052905600a165627a7a7230582058fed8e0ecd89c5b2d9e08c01eef124fdf711cebbb09f25f1226837877719ff10029",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH12 0x33B2E3C9FD0803CE8000000 PUSH1 0x0 DUP2 DUP2 SSTORE CALLER DUP1 DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE SWAP4 DUP3 KECCAK256 DUP4 SWAP1 SSTORE SWAP2 DUP5 MSTORE SWAP1 SWAP3 SWAP1 SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG3 TIMESTAMP PUSH3 0x1BAF80 ADD PUSH1 0x6 SSTORE PUSH2 0x231F DUP1 PUSH2 0x6B PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xDA JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x234B445 DUP2 EQ PUSH2 0xDF JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x12A JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1B4 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x1F9 JUMPI DUP1 PUSH4 0x1928B3CB EQ PUSH2 0x220 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x2CD JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x304 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x32F JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x360 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x38E JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x3A3 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x3D4 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x405 JUMPI DUP1 PUSH4 0xE33278BA EQ PUSH2 0x439 JUMPI DUP1 PUSH4 0xE43926F8 EQ PUSH2 0x474 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10D PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH2 0x4C6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x136 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13F PUSH2 0x4F8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x179 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x161 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x1A6 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x52F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x205 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20E PUSH2 0x5A2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x238 PUSH1 0x4 CALLDATALOAD PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP15 AND DUP3 MSTORE DUP13 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP12 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 ADD DUP10 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x277 JUMPI INVALID JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2AF JUMPI INVALID JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD DUP2 AND SWAP1 PUSH1 0x24 CALLDATALOAD AND PUSH1 0x44 CALLDATALOAD PUSH2 0x716 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x310 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x319 PUSH2 0x738 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x33B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x73D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x36C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20E PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH2 0x775 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13F PUSH2 0x79D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x7D4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x803 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x411 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20E PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD DUP2 AND SWAP1 PUSH1 0x24 CALLDATALOAD AND PUSH2 0x810 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x445 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20E PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x24 CALLDATALOAD AND PUSH2 0x848 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x480 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 DUP1 CALLDATALOAD DUP3 AND SWAP2 PUSH1 0x24 DUP1 CALLDATALOAD SWAP1 SWAP2 AND SWAP2 PUSH1 0x44 CALLDATALOAD SWAP2 PUSH1 0x64 CALLDATALOAD DUP1 DUP3 ADD SWAP3 SWAP1 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0x84 CALLDATALOAD SWAP1 DUP2 ADD SWAP2 ADD CALLDATALOAD PUSH2 0x889 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x11 DUP2 MSTORE PUSH32 0x30782050726F746F636F6C20546F6B656E000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP7 SWAP1 SSTORE DUP2 MLOAD DUP7 DUP2 MSTORE SWAP2 MLOAD SWAP4 SWAP5 SWAP1 SWAP4 SWAP1 SWAP3 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP3 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x5C1 PUSH2 0x228F JUMP JUMPDEST PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH2 0x160 DUP2 ADD DUP5 MSTORE DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x1 DUP1 DUP5 ADD SLOAD DUP3 AND SWAP5 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x2 DUP4 ADD SLOAD SWAP1 DUP2 AND SWAP5 DUP3 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP3 SWAP1 SWAP2 PUSH1 0x60 DUP5 ADD SWAP2 PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH1 0xFF AND SWAP1 DUP2 GT ISZERO PUSH2 0x643 JUMPI INVALID JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x64E JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x4 DUP1 DUP4 ADD SLOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x5 DUP4 ADD SLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x6 DUP4 ADD SLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x7 DUP4 ADD SLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0x8 DUP4 ADD SLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0x9 DUP4 ADD SLOAD PUSH1 0xE0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0xFF AND SWAP1 DUP2 GT ISZERO PUSH2 0x6A5 JUMPI INVALID JUMPDEST PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x6B0 JUMPI INVALID JUMPDEST DUP2 MSTORE POP POP SWAP1 POP DUP1 PUSH1 0x0 ADD MLOAD SWAP12 POP DUP1 PUSH1 0x20 ADD MLOAD SWAP11 POP DUP1 PUSH1 0x40 ADD MLOAD SWAP10 POP DUP1 PUSH1 0x60 ADD MLOAD SWAP9 POP DUP1 PUSH1 0x80 ADD MLOAD SWAP8 POP DUP1 PUSH1 0xA0 ADD MLOAD SWAP7 POP DUP1 PUSH1 0xC0 ADD MLOAD SWAP6 POP DUP1 PUSH1 0xE0 ADD MLOAD SWAP5 POP DUP1 PUSH2 0x100 ADD MLOAD SWAP4 POP DUP1 PUSH2 0x120 ADD MLOAD SWAP3 POP DUP1 PUSH2 0x140 ADD MLOAD SWAP2 POP POP SWAP2 SWAP4 SWAP6 SWAP8 SWAP10 SWAP12 SWAP1 SWAP3 SWAP5 SWAP7 SWAP9 SWAP11 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x723 DUP5 CALLER DUP5 PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x72E DUP5 DUP5 DUP5 PUSH2 0xD36 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x12 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND ISZERO ISZERO PUSH2 0x761 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x76C CALLER DUP5 DUP5 PUSH2 0xE4B JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x3 DUP2 MSTORE PUSH32 0x5244580000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND ISZERO ISZERO PUSH2 0x7F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x76C CALLER DUP5 DUP5 PUSH2 0xC39 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x76C CALLER DUP5 DUP5 PUSH2 0xD36 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH8 0xFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x893 PUSH2 0x228F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x8D2 DUP11 DUP11 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP PUSH2 0xE95 SWAP5 POP POP POP POP POP JUMP JUMPDEST SWAP5 POP DUP5 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP14 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x92D JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP13 AND PUSH1 0x40 DUP7 ADD MSTORE PUSH2 0x9F5 JUMP JUMPDEST DUP5 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x98E JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP15 AND PUSH1 0x20 DUP8 ADD MSTORE DUP13 AND PUSH1 0x40 DUP7 ADD MSTORE PUSH2 0x9F5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F43414C4C5F46524F4D5F41535345545F50524F5859000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x9FE DUP6 PUSH2 0x122E JUMP JUMPDEST SWAP4 POP PUSH1 0x0 DUP1 DUP6 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x9 ADD SLOAD PUSH1 0xFF AND PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xA21 JUMPI INVALID JUMPDEST EQ PUSH2 0xB1B JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH2 0x160 DUP2 ADD DUP5 MSTORE DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x1 DUP1 DUP5 ADD SLOAD DUP3 AND SWAP5 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x2 DUP4 ADD SLOAD SWAP1 DUP2 AND SWAP5 DUP3 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP3 SWAP1 SWAP2 PUSH1 0x60 DUP5 ADD SWAP2 PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH1 0xFF AND SWAP1 DUP2 GT ISZERO PUSH2 0xAA8 JUMPI INVALID JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0xAB3 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x4 DUP1 DUP4 ADD SLOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x5 DUP4 ADD SLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x6 DUP4 ADD SLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x7 DUP4 ADD SLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0x8 DUP4 ADD SLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0x9 DUP4 ADD SLOAD PUSH1 0xE0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0xFF AND SWAP1 DUP2 GT ISZERO PUSH2 0xB0A JUMPI INVALID JUMPDEST PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xB15 JUMPI INVALID JUMPDEST SWAP1 MSTORE POP SWAP5 POP JUMPDEST PUSH2 0xB2A DUP6 PUSH2 0x100 ADD MLOAD DUP13 PUSH2 0x142C JUMP JUMPDEST PUSH1 0x80 DUP7 ADD MLOAD SWAP1 SWAP4 POP DUP4 GT ISZERO PUSH2 0xBA0 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F41535345545F414D4F554E54000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP POP PUSH1 0x80 DUP4 ADD MLOAD DUP2 DUP11 EQ SWAP1 DUP3 EQ DUP2 ISZERO PUSH2 0xBDA JUMPI PUSH2 0xBCB DUP6 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD ADDRESS DUP9 PUSH1 0xA0 ADD MLOAD PUSH2 0x14A7 JUMP JUMPDEST PUSH2 0xBD5 DUP5 DUP7 PUSH2 0x1582 JUMP JUMPDEST PUSH2 0xC26 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xC1B JUMPI PUSH2 0xBD5 DUP5 DUP7 DUP11 DUP11 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP PUSH2 0x1B2C SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0xC26 DUP5 DUP7 DUP6 PUSH2 0x1CA1 JUMP JUMPDEST POP PUSH1 0x1 SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0xC7B JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD DUP2 GT ISZERO JUMPDEST ISZERO ISZERO PUSH2 0xC86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH2 0xCC3 SWAP1 DUP3 PUSH2 0x2011 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP9 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE DUP2 MLOAD SWAP5 DUP6 MSTORE SWAP1 MLOAD SWAP3 SWAP4 SWAP2 SWAP3 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0xD6B JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 GT ISZERO JUMPDEST ISZERO ISZERO PUSH2 0xD76 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xDA6 SWAP1 DUP3 PUSH2 0x2011 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP5 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0xDE2 SWAP1 DUP3 PUSH2 0x142C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP4 SWAP3 DUP8 AND SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0xE58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH2 0xCC3 SWAP1 DUP3 PUSH2 0x142C JUMP JUMPDEST PUSH2 0xE9D PUSH2 0x228F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP9 MLOAD PUSH1 0xE0 EQ ISZERO ISZERO PUSH2 0xF1A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F504F534954494F4E5F444154415F4C454E47544800000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0xF2B DUP10 PUSH1 0xC PUSH4 0xFFFFFFFF PUSH2 0x2088 AND JUMP JUMPDEST SWAP7 POP PUSH2 0xF3E DUP10 PUSH1 0x2C PUSH4 0xFFFFFFFF PUSH2 0x2088 AND JUMP JUMPDEST SWAP6 POP PUSH1 0x0 PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 MUL DUP10 PUSH1 0x5F DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xF73 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD ADD MLOAD PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 SWAP1 DIV PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 MUL PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND GT PUSH2 0xFEC JUMPI PUSH1 0x0 PUSH2 0xFEF JUMP JUMPDEST PUSH1 0x1 JUMPDEST SWAP5 POP PUSH2 0x1002 DUP10 PUSH1 0x60 PUSH4 0xFFFFFFFF PUSH2 0x2144 AND JUMP JUMPDEST SWAP4 POP PUSH2 0x1015 DUP10 PUSH1 0x80 PUSH4 0xFFFFFFFF PUSH2 0x2144 AND JUMP JUMPDEST SWAP3 POP PUSH2 0x1028 DUP10 PUSH1 0xA0 PUSH4 0xFFFFFFFF PUSH2 0x2144 AND JUMP JUMPDEST SWAP2 POP PUSH2 0x103B DUP10 PUSH1 0xC0 PUSH4 0xFFFFFFFF PUSH2 0x2144 AND JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1077 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND ISZERO ISZERO JUMPDEST ISZERO ISZERO PUSH2 0x10E4 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F504F534954494F4E5F444154415F41444452455353455300 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 GT DUP1 ISZERO PUSH2 0x10F4 JUMPI POP PUSH1 0x0 DUP4 GT JUMPDEST DUP1 ISZERO PUSH2 0x1100 JUMPI POP PUSH1 0x0 DUP3 GT JUMPDEST DUP1 ISZERO PUSH2 0x110C JUMPI POP PUSH1 0x0 DUP2 GT JUMPDEST ISZERO ISZERO PUSH2 0x1179 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F504F534954494F4E5F444154415F56414C55455300000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x160 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x11E7 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x121F JUMPI INVALID JUMPDEST SWAP1 MSTORE SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 PUSH1 0x0 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD DUP7 PUSH1 0x80 ADD MLOAD DUP8 PUSH1 0xA0 ADD MLOAD DUP9 PUSH1 0xC0 ADD MLOAD DUP10 PUSH1 0xE0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP7 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1330 JUMPI INVALID JUMPDEST PUSH1 0xFF AND PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x1 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP9 POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP DUP1 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x13DB JUMPI DUP1 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x139E JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 SWAP1 SWAP4 SUB PUSH2 0x100 EXP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD DUP1 NOT SWAP1 SWAP2 AND SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 MSTORE PUSH1 0x40 MLOAD SWAP3 ADD DUP3 SWAP1 SUB SWAP1 SWAP2 KECCAK256 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x14A0 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x55494E543235365F4F564552464C4F5700000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP4 PUSH1 0x4 DUP3 ADD MSTORE DUP3 PUSH1 0x24 DUP3 ADD MSTORE DUP2 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0x64 DUP4 PUSH1 0x0 DUP10 GAS CALL PUSH1 0x0 DUP3 MLOAD GT PUSH1 0x20 RETURNDATASIZE EQ AND RETURNDATASIZE ISZERO OR DUP2 AND SWAP1 POP PUSH1 0x64 DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO ISZERO PUSH2 0x157A JUMPI PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH29 0x2000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 MSTORE PUSH29 0xF5452414E534645525F4641494C454400000000000000000000000000 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x60 MSTORE PUSH1 0x64 PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x158D DUP3 PUSH2 0x2150 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x15A8 JUMPI POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x8 ADD SLOAD ISZERO JUMPDEST ISZERO ISZERO PUSH2 0x1615 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x504F534954494F4E5F414C52454144595F4F50454E4544000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO ISZERO PUSH2 0x169A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F45524332305F544F4B454E5F414444524553530000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x20 DUP3 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x16DC JUMPI POP PUSH1 0x40 DUP3 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x171C JUMPI POP DUP2 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO ISZERO PUSH2 0x1789 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F5452414445525F4144445245535345530000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x60 ADD MLOAD PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x179B JUMPI INVALID JUMPDEST EQ DUP1 PUSH2 0x17B6 JUMPI POP PUSH1 0x1 DUP3 PUSH1 0x60 ADD MLOAD PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x17B4 JUMPI INVALID JUMPDEST EQ JUMPDEST ISZERO ISZERO PUSH2 0x1823 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F54524144455F545950450000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP5 MLOAD DUP2 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP1 DUP2 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND OR DUP4 SSTORE SWAP3 DUP7 ADD MLOAD PUSH1 0x1 DUP1 DUP5 ADD DUP1 SLOAD DUP7 AND SWAP3 DUP5 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE SWAP4 DUP7 ADD MLOAD PUSH1 0x2 DUP4 ADD DUP1 SLOAD SWAP1 SWAP5 AND SWAP2 AND OR DUP1 DUP4 SSTORE PUSH1 0x60 DUP7 ADD MLOAD DUP7 SWAP5 SWAP3 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DUP5 SWAP1 DUP2 GT ISZERO PUSH2 0x18F4 JUMPI INVALID JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD SSTORE PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD SSTORE PUSH1 0xE0 DUP3 ADD MLOAD DUP2 PUSH1 0x6 ADD SSTORE PUSH2 0x100 DUP3 ADD MLOAD DUP2 PUSH1 0x7 ADD SSTORE PUSH2 0x120 DUP3 ADD MLOAD DUP2 PUSH1 0x8 ADD SSTORE PUSH2 0x140 DUP3 ADD MLOAD DUP2 PUSH1 0x9 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x195C JUMPI INVALID JUMPDEST MUL OR SWAP1 SSTORE POP POP POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 TIMESTAMP PUSH1 0x8 DUP3 ADD SSTORE PUSH1 0x9 ADD DUP1 SLOAD PUSH1 0x1 SWAP2 SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP3 DUP1 MUL OR SWAP1 SSTORE POP POP PUSH1 0x20 DUP2 DUP2 ADD DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 DUP1 DUP6 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD DUP6 MLOAD DUP6 AND DUP5 MSTORE PUSH1 0x4 DUP8 MSTORE DUP2 DUP5 KECCAK256 PUSH8 0xFFFFFFFFFFFFFFFF SWAP2 DUP3 AND DUP1 DUP7 MSTORE SWAP1 DUP9 MSTORE DUP3 DUP6 KECCAK256 DUP11 SWAP1 SSTORE SWAP6 MLOAD SWAP1 SWAP5 AND DUP4 MSTORE SWAP5 MSTORE SWAP3 SWAP1 SWAP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000 AND PUSH1 0x1 DUP1 DUP5 ADD SWAP1 SWAP5 AND OR SWAP1 SSTORE PUSH1 0x60 DUP4 ADD MLOAD SWAP1 SWAP2 DUP2 GT ISZERO PUSH2 0x1A4A JUMPI INVALID JUMPDEST DUP3 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8966DC2A47CFBF91782DEFA097CF9709F35196D3371500CB776528FBD10162A DUP7 DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x80 ADD MLOAD DUP9 PUSH1 0xA0 ADD MLOAD DUP10 PUSH1 0xC0 ADD MLOAD DUP11 PUSH1 0xE0 ADD MLOAD PUSH1 0x40 MLOAD DUP1 DUP8 PUSH1 0x0 NOT AND PUSH1 0x0 NOT AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP7 POP POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B37 DUP4 PUSH2 0x216C JUMP JUMPDEST ISZERO PUSH2 0x1BA3 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x504F534954494F4E5F414C52454144595F434C4F534544000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x1BAC DUP3 PUSH2 0x2175 JUMP JUMPDEST SWAP1 POP PUSH2 0x1BC6 DUP4 PUSH1 0x0 ADD MLOAD DUP5 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP5 PUSH2 0x219F JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x9 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x4 OR SWAP1 SSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1C10 JUMPI INVALID JUMPDEST PUSH1 0x40 DUP1 DUP6 ADD MLOAD PUSH1 0x20 DUP1 DUP8 ADD MLOAD DUP8 MLOAD PUSH1 0x80 DUP1 DUP11 ADD MLOAD PUSH1 0xA0 DUP1 DUP13 ADD MLOAD PUSH2 0x100 DUP14 ADD MLOAD DUP10 MLOAD DUP16 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP7 DUP8 AND SWAP9 DUP2 ADD SWAP9 SWAP1 SWAP9 MSTORE DUP8 DUP11 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP8 ADD MSTORE SWAP2 DUP6 ADD MSTORE DUP4 ADD DUP8 SWAP1 MSTORE SWAP4 MLOAD SWAP3 DUP5 AND SWAP4 AND SWAP2 PUSH32 0x35F7A761114483BBD7C089132B621DA2325015070FB46D26442093086B667673 SWAP2 DUP2 SWAP1 SUB PUSH1 0xC0 ADD SWAP1 LOG4 POP POP POP POP JUMP JUMPDEST PUSH2 0x1CAA DUP3 PUSH2 0x21D7 JUMP JUMPDEST DUP1 PUSH2 0x1CB9 JUMPI POP PUSH2 0x1CB9 DUP3 PUSH2 0x21E0 JUMP JUMPDEST ISZERO ISZERO PUSH2 0x1D26 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x504F534954494F4E5F414C52454144595F4F50454E4544000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO ISZERO PUSH2 0x1DAB JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F45524332305F544F4B454E5F414444524553530000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x20 DUP3 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1DED JUMPI POP PUSH1 0x40 DUP3 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x1E2D JUMPI POP DUP2 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO ISZERO PUSH2 0x1E9A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F5452414445525F4144445245535345530000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x60 ADD MLOAD PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1EAC JUMPI INVALID JUMPDEST EQ DUP1 PUSH2 0x1EC7 JUMPI POP PUSH1 0x1 DUP3 PUSH1 0x60 ADD MLOAD PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1EC5 JUMPI INVALID JUMPDEST EQ JUMPDEST ISZERO ISZERO PUSH2 0x1F34 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F54524144455F545950450000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x7 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x9 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x2 OR SWAP1 SSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1F85 JUMPI INVALID JUMPDEST PUSH1 0x40 DUP1 DUP5 ADD MLOAD PUSH1 0x20 DUP1 DUP7 ADD MLOAD DUP7 MLOAD PUSH1 0x80 DUP1 DUP10 ADD MLOAD PUSH1 0xA0 DUP1 DUP12 ADD MLOAD PUSH2 0x100 DUP13 ADD MLOAD DUP10 MLOAD DUP15 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP7 DUP8 AND SWAP9 DUP2 ADD SWAP9 SWAP1 SWAP9 MSTORE DUP8 DUP11 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP8 ADD MSTORE SWAP2 DUP6 ADD MSTORE SWAP5 MLOAD SWAP4 DUP2 AND SWAP5 SWAP2 AND SWAP3 PUSH32 0xCE97A5A77A419598C6F287194FCA925E3BFF579C4DB6B9FA1A7ADAD422E60FD0 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x2082 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x55494E543235365F554E444552464C4F57000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO ISZERO ISZERO PUSH2 0x2125 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F32305F4C454E4754485F5245 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST POP ADD PUSH1 0x14 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14A0 DUP4 DUP4 PUSH2 0x21E9 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP3 PUSH2 0x140 ADD MLOAD PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2165 JUMPI INVALID JUMPDEST EQ SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH2 0x2154 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MLOAD LT PUSH2 0x2196 JUMPI PUSH2 0x2191 DUP3 PUSH1 0x0 PUSH4 0xFFFFFFFF PUSH2 0x21E9 AND JUMP JUMPDEST PUSH2 0x2199 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SGT ISZERO PUSH2 0x21B9 JUMPI PUSH2 0x21B4 DUP5 DUP5 DUP5 DUP5 PUSH2 0x14A7 JUMP JUMPDEST PUSH2 0x21D1 JUMP JUMPDEST PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x21D1 JUMPI PUSH2 0x21D1 DUP5 DUP4 DUP6 DUP5 PUSH1 0x0 SUB PUSH2 0x14A7 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH2 0x2154 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH2 0x2154 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO ISZERO ISZERO PUSH2 0x2286 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F33325F4C454E4754485F5245 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x160 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 PUSH1 0x60 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x22EE JUMPI INVALID JUMPDEST SWAP1 MSTORE SWAP1 JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 PC INVALID 0xd8 0xe0 0xec 0xd8 SWAP13 JUMPDEST 0x2d SWAP15 ADDMOD 0xc0 0x1e 0xef SLT 0x4f 0xdf PUSH18 0x1CEBBB09F25F1226837877719FF100290000 ",
				"sourceMap": "57:263:1:-;;;;;8558:6:0;321:12;:29;;;370:10;360:21;;;:9;:21;;;;;;;:36;;;411:46;;;370:10;;321:12;;411:46;;;1711:15:2;11673:7;1711:34;1697:11;:48;57:263:1;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xDA JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x234B445 DUP2 EQ PUSH2 0xDF JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x12A JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1B4 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x1F9 JUMPI DUP1 PUSH4 0x1928B3CB EQ PUSH2 0x220 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x2CD JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x304 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x32F JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x360 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x38E JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x3A3 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x3D4 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x405 JUMPI DUP1 PUSH4 0xE33278BA EQ PUSH2 0x439 JUMPI DUP1 PUSH4 0xE43926F8 EQ PUSH2 0x474 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10D PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH2 0x4C6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x136 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13F PUSH2 0x4F8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x179 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x161 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x1A6 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x52F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x205 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20E PUSH2 0x5A2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x238 PUSH1 0x4 CALLDATALOAD PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP15 AND DUP3 MSTORE DUP13 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP12 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 ADD DUP10 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x277 JUMPI INVALID JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2AF JUMPI INVALID JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD DUP2 AND SWAP1 PUSH1 0x24 CALLDATALOAD AND PUSH1 0x44 CALLDATALOAD PUSH2 0x716 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x310 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x319 PUSH2 0x738 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x33B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x73D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x36C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20E PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH2 0x775 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13F PUSH2 0x79D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x7D4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x803 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x411 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20E PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD DUP2 AND SWAP1 PUSH1 0x24 CALLDATALOAD AND PUSH2 0x810 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x445 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20E PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x24 CALLDATALOAD AND PUSH2 0x848 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x480 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 DUP1 CALLDATALOAD DUP3 AND SWAP2 PUSH1 0x24 DUP1 CALLDATALOAD SWAP1 SWAP2 AND SWAP2 PUSH1 0x44 CALLDATALOAD SWAP2 PUSH1 0x64 CALLDATALOAD DUP1 DUP3 ADD SWAP3 SWAP1 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0x84 CALLDATALOAD SWAP1 DUP2 ADD SWAP2 ADD CALLDATALOAD PUSH2 0x889 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x11 DUP2 MSTORE PUSH32 0x30782050726F746F636F6C20546F6B656E000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP7 SWAP1 SSTORE DUP2 MLOAD DUP7 DUP2 MSTORE SWAP2 MLOAD SWAP4 SWAP5 SWAP1 SWAP4 SWAP1 SWAP3 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP3 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x5C1 PUSH2 0x228F JUMP JUMPDEST PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH2 0x160 DUP2 ADD DUP5 MSTORE DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x1 DUP1 DUP5 ADD SLOAD DUP3 AND SWAP5 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x2 DUP4 ADD SLOAD SWAP1 DUP2 AND SWAP5 DUP3 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP3 SWAP1 SWAP2 PUSH1 0x60 DUP5 ADD SWAP2 PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH1 0xFF AND SWAP1 DUP2 GT ISZERO PUSH2 0x643 JUMPI INVALID JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x64E JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x4 DUP1 DUP4 ADD SLOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x5 DUP4 ADD SLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x6 DUP4 ADD SLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x7 DUP4 ADD SLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0x8 DUP4 ADD SLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0x9 DUP4 ADD SLOAD PUSH1 0xE0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0xFF AND SWAP1 DUP2 GT ISZERO PUSH2 0x6A5 JUMPI INVALID JUMPDEST PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x6B0 JUMPI INVALID JUMPDEST DUP2 MSTORE POP POP SWAP1 POP DUP1 PUSH1 0x0 ADD MLOAD SWAP12 POP DUP1 PUSH1 0x20 ADD MLOAD SWAP11 POP DUP1 PUSH1 0x40 ADD MLOAD SWAP10 POP DUP1 PUSH1 0x60 ADD MLOAD SWAP9 POP DUP1 PUSH1 0x80 ADD MLOAD SWAP8 POP DUP1 PUSH1 0xA0 ADD MLOAD SWAP7 POP DUP1 PUSH1 0xC0 ADD MLOAD SWAP6 POP DUP1 PUSH1 0xE0 ADD MLOAD SWAP5 POP DUP1 PUSH2 0x100 ADD MLOAD SWAP4 POP DUP1 PUSH2 0x120 ADD MLOAD SWAP3 POP DUP1 PUSH2 0x140 ADD MLOAD SWAP2 POP POP SWAP2 SWAP4 SWAP6 SWAP8 SWAP10 SWAP12 SWAP1 SWAP3 SWAP5 SWAP7 SWAP9 SWAP11 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x723 DUP5 CALLER DUP5 PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x72E DUP5 DUP5 DUP5 PUSH2 0xD36 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x12 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND ISZERO ISZERO PUSH2 0x761 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x76C CALLER DUP5 DUP5 PUSH2 0xE4B JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x3 DUP2 MSTORE PUSH32 0x5244580000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND ISZERO ISZERO PUSH2 0x7F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x76C CALLER DUP5 DUP5 PUSH2 0xC39 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x76C CALLER DUP5 DUP5 PUSH2 0xD36 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH8 0xFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x893 PUSH2 0x228F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x8D2 DUP11 DUP11 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP PUSH2 0xE95 SWAP5 POP POP POP POP POP JUMP JUMPDEST SWAP5 POP DUP5 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP14 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x92D JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP13 AND PUSH1 0x40 DUP7 ADD MSTORE PUSH2 0x9F5 JUMP JUMPDEST DUP5 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x98E JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP15 AND PUSH1 0x20 DUP8 ADD MSTORE DUP13 AND PUSH1 0x40 DUP7 ADD MSTORE PUSH2 0x9F5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F43414C4C5F46524F4D5F41535345545F50524F5859000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x9FE DUP6 PUSH2 0x122E JUMP JUMPDEST SWAP4 POP PUSH1 0x0 DUP1 DUP6 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x9 ADD SLOAD PUSH1 0xFF AND PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xA21 JUMPI INVALID JUMPDEST EQ PUSH2 0xB1B JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH2 0x160 DUP2 ADD DUP5 MSTORE DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x1 DUP1 DUP5 ADD SLOAD DUP3 AND SWAP5 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x2 DUP4 ADD SLOAD SWAP1 DUP2 AND SWAP5 DUP3 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP3 SWAP1 SWAP2 PUSH1 0x60 DUP5 ADD SWAP2 PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH1 0xFF AND SWAP1 DUP2 GT ISZERO PUSH2 0xAA8 JUMPI INVALID JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0xAB3 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x4 DUP1 DUP4 ADD SLOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x5 DUP4 ADD SLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x6 DUP4 ADD SLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x7 DUP4 ADD SLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0x8 DUP4 ADD SLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0x9 DUP4 ADD SLOAD PUSH1 0xE0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0xFF AND SWAP1 DUP2 GT ISZERO PUSH2 0xB0A JUMPI INVALID JUMPDEST PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xB15 JUMPI INVALID JUMPDEST SWAP1 MSTORE POP SWAP5 POP JUMPDEST PUSH2 0xB2A DUP6 PUSH2 0x100 ADD MLOAD DUP13 PUSH2 0x142C JUMP JUMPDEST PUSH1 0x80 DUP7 ADD MLOAD SWAP1 SWAP4 POP DUP4 GT ISZERO PUSH2 0xBA0 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F41535345545F414D4F554E54000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP POP PUSH1 0x80 DUP4 ADD MLOAD DUP2 DUP11 EQ SWAP1 DUP3 EQ DUP2 ISZERO PUSH2 0xBDA JUMPI PUSH2 0xBCB DUP6 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD ADDRESS DUP9 PUSH1 0xA0 ADD MLOAD PUSH2 0x14A7 JUMP JUMPDEST PUSH2 0xBD5 DUP5 DUP7 PUSH2 0x1582 JUMP JUMPDEST PUSH2 0xC26 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xC1B JUMPI PUSH2 0xBD5 DUP5 DUP7 DUP11 DUP11 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP PUSH2 0x1B2C SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0xC26 DUP5 DUP7 DUP6 PUSH2 0x1CA1 JUMP JUMPDEST POP PUSH1 0x1 SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0xC7B JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD DUP2 GT ISZERO JUMPDEST ISZERO ISZERO PUSH2 0xC86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH2 0xCC3 SWAP1 DUP3 PUSH2 0x2011 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP9 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE DUP2 MLOAD SWAP5 DUP6 MSTORE SWAP1 MLOAD SWAP3 SWAP4 SWAP2 SWAP3 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0xD6B JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 GT ISZERO JUMPDEST ISZERO ISZERO PUSH2 0xD76 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xDA6 SWAP1 DUP3 PUSH2 0x2011 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP5 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0xDE2 SWAP1 DUP3 PUSH2 0x142C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP4 SWAP3 DUP8 AND SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0xE58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH2 0xCC3 SWAP1 DUP3 PUSH2 0x142C JUMP JUMPDEST PUSH2 0xE9D PUSH2 0x228F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP9 MLOAD PUSH1 0xE0 EQ ISZERO ISZERO PUSH2 0xF1A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F504F534954494F4E5F444154415F4C454E47544800000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0xF2B DUP10 PUSH1 0xC PUSH4 0xFFFFFFFF PUSH2 0x2088 AND JUMP JUMPDEST SWAP7 POP PUSH2 0xF3E DUP10 PUSH1 0x2C PUSH4 0xFFFFFFFF PUSH2 0x2088 AND JUMP JUMPDEST SWAP6 POP PUSH1 0x0 PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 MUL DUP10 PUSH1 0x5F DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xF73 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD ADD MLOAD PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 SWAP1 DIV PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 MUL PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND GT PUSH2 0xFEC JUMPI PUSH1 0x0 PUSH2 0xFEF JUMP JUMPDEST PUSH1 0x1 JUMPDEST SWAP5 POP PUSH2 0x1002 DUP10 PUSH1 0x60 PUSH4 0xFFFFFFFF PUSH2 0x2144 AND JUMP JUMPDEST SWAP4 POP PUSH2 0x1015 DUP10 PUSH1 0x80 PUSH4 0xFFFFFFFF PUSH2 0x2144 AND JUMP JUMPDEST SWAP3 POP PUSH2 0x1028 DUP10 PUSH1 0xA0 PUSH4 0xFFFFFFFF PUSH2 0x2144 AND JUMP JUMPDEST SWAP2 POP PUSH2 0x103B DUP10 PUSH1 0xC0 PUSH4 0xFFFFFFFF PUSH2 0x2144 AND JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1077 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND ISZERO ISZERO JUMPDEST ISZERO ISZERO PUSH2 0x10E4 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F504F534954494F4E5F444154415F41444452455353455300 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 GT DUP1 ISZERO PUSH2 0x10F4 JUMPI POP PUSH1 0x0 DUP4 GT JUMPDEST DUP1 ISZERO PUSH2 0x1100 JUMPI POP PUSH1 0x0 DUP3 GT JUMPDEST DUP1 ISZERO PUSH2 0x110C JUMPI POP PUSH1 0x0 DUP2 GT JUMPDEST ISZERO ISZERO PUSH2 0x1179 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F504F534954494F4E5F444154415F56414C55455300000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x160 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x11E7 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x121F JUMPI INVALID JUMPDEST SWAP1 MSTORE SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 PUSH1 0x0 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD DUP7 PUSH1 0x80 ADD MLOAD DUP8 PUSH1 0xA0 ADD MLOAD DUP9 PUSH1 0xC0 ADD MLOAD DUP10 PUSH1 0xE0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP7 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1330 JUMPI INVALID JUMPDEST PUSH1 0xFF AND PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x1 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP9 POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP DUP1 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x13DB JUMPI DUP1 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x139E JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 SWAP1 SWAP4 SUB PUSH2 0x100 EXP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD DUP1 NOT SWAP1 SWAP2 AND SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 MSTORE PUSH1 0x40 MLOAD SWAP3 ADD DUP3 SWAP1 SUB SWAP1 SWAP2 KECCAK256 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x14A0 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x55494E543235365F4F564552464C4F5700000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP4 PUSH1 0x4 DUP3 ADD MSTORE DUP3 PUSH1 0x24 DUP3 ADD MSTORE DUP2 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0x64 DUP4 PUSH1 0x0 DUP10 GAS CALL PUSH1 0x0 DUP3 MLOAD GT PUSH1 0x20 RETURNDATASIZE EQ AND RETURNDATASIZE ISZERO OR DUP2 AND SWAP1 POP PUSH1 0x64 DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO ISZERO PUSH2 0x157A JUMPI PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH29 0x2000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 MSTORE PUSH29 0xF5452414E534645525F4641494C454400000000000000000000000000 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x60 MSTORE PUSH1 0x64 PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x158D DUP3 PUSH2 0x2150 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x15A8 JUMPI POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x8 ADD SLOAD ISZERO JUMPDEST ISZERO ISZERO PUSH2 0x1615 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x504F534954494F4E5F414C52454144595F4F50454E4544000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO ISZERO PUSH2 0x169A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F45524332305F544F4B454E5F414444524553530000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x20 DUP3 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x16DC JUMPI POP PUSH1 0x40 DUP3 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x171C JUMPI POP DUP2 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO ISZERO PUSH2 0x1789 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F5452414445525F4144445245535345530000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x60 ADD MLOAD PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x179B JUMPI INVALID JUMPDEST EQ DUP1 PUSH2 0x17B6 JUMPI POP PUSH1 0x1 DUP3 PUSH1 0x60 ADD MLOAD PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x17B4 JUMPI INVALID JUMPDEST EQ JUMPDEST ISZERO ISZERO PUSH2 0x1823 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F54524144455F545950450000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP5 MLOAD DUP2 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP1 DUP2 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND OR DUP4 SSTORE SWAP3 DUP7 ADD MLOAD PUSH1 0x1 DUP1 DUP5 ADD DUP1 SLOAD DUP7 AND SWAP3 DUP5 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE SWAP4 DUP7 ADD MLOAD PUSH1 0x2 DUP4 ADD DUP1 SLOAD SWAP1 SWAP5 AND SWAP2 AND OR DUP1 DUP4 SSTORE PUSH1 0x60 DUP7 ADD MLOAD DUP7 SWAP5 SWAP3 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DUP5 SWAP1 DUP2 GT ISZERO PUSH2 0x18F4 JUMPI INVALID JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD SSTORE PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD SSTORE PUSH1 0xE0 DUP3 ADD MLOAD DUP2 PUSH1 0x6 ADD SSTORE PUSH2 0x100 DUP3 ADD MLOAD DUP2 PUSH1 0x7 ADD SSTORE PUSH2 0x120 DUP3 ADD MLOAD DUP2 PUSH1 0x8 ADD SSTORE PUSH2 0x140 DUP3 ADD MLOAD DUP2 PUSH1 0x9 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x195C JUMPI INVALID JUMPDEST MUL OR SWAP1 SSTORE POP POP POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 TIMESTAMP PUSH1 0x8 DUP3 ADD SSTORE PUSH1 0x9 ADD DUP1 SLOAD PUSH1 0x1 SWAP2 SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP3 DUP1 MUL OR SWAP1 SSTORE POP POP PUSH1 0x20 DUP2 DUP2 ADD DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 DUP1 DUP6 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD DUP6 MLOAD DUP6 AND DUP5 MSTORE PUSH1 0x4 DUP8 MSTORE DUP2 DUP5 KECCAK256 PUSH8 0xFFFFFFFFFFFFFFFF SWAP2 DUP3 AND DUP1 DUP7 MSTORE SWAP1 DUP9 MSTORE DUP3 DUP6 KECCAK256 DUP11 SWAP1 SSTORE SWAP6 MLOAD SWAP1 SWAP5 AND DUP4 MSTORE SWAP5 MSTORE SWAP3 SWAP1 SWAP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000 AND PUSH1 0x1 DUP1 DUP5 ADD SWAP1 SWAP5 AND OR SWAP1 SSTORE PUSH1 0x60 DUP4 ADD MLOAD SWAP1 SWAP2 DUP2 GT ISZERO PUSH2 0x1A4A JUMPI INVALID JUMPDEST DUP3 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8966DC2A47CFBF91782DEFA097CF9709F35196D3371500CB776528FBD10162A DUP7 DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x80 ADD MLOAD DUP9 PUSH1 0xA0 ADD MLOAD DUP10 PUSH1 0xC0 ADD MLOAD DUP11 PUSH1 0xE0 ADD MLOAD PUSH1 0x40 MLOAD DUP1 DUP8 PUSH1 0x0 NOT AND PUSH1 0x0 NOT AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP7 POP POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B37 DUP4 PUSH2 0x216C JUMP JUMPDEST ISZERO PUSH2 0x1BA3 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x504F534954494F4E5F414C52454144595F434C4F534544000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x1BAC DUP3 PUSH2 0x2175 JUMP JUMPDEST SWAP1 POP PUSH2 0x1BC6 DUP4 PUSH1 0x0 ADD MLOAD DUP5 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP5 PUSH2 0x219F JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x9 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x4 OR SWAP1 SSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1C10 JUMPI INVALID JUMPDEST PUSH1 0x40 DUP1 DUP6 ADD MLOAD PUSH1 0x20 DUP1 DUP8 ADD MLOAD DUP8 MLOAD PUSH1 0x80 DUP1 DUP11 ADD MLOAD PUSH1 0xA0 DUP1 DUP13 ADD MLOAD PUSH2 0x100 DUP14 ADD MLOAD DUP10 MLOAD DUP16 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP7 DUP8 AND SWAP9 DUP2 ADD SWAP9 SWAP1 SWAP9 MSTORE DUP8 DUP11 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP8 ADD MSTORE SWAP2 DUP6 ADD MSTORE DUP4 ADD DUP8 SWAP1 MSTORE SWAP4 MLOAD SWAP3 DUP5 AND SWAP4 AND SWAP2 PUSH32 0x35F7A761114483BBD7C089132B621DA2325015070FB46D26442093086B667673 SWAP2 DUP2 SWAP1 SUB PUSH1 0xC0 ADD SWAP1 LOG4 POP POP POP POP JUMP JUMPDEST PUSH2 0x1CAA DUP3 PUSH2 0x21D7 JUMP JUMPDEST DUP1 PUSH2 0x1CB9 JUMPI POP PUSH2 0x1CB9 DUP3 PUSH2 0x21E0 JUMP JUMPDEST ISZERO ISZERO PUSH2 0x1D26 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x504F534954494F4E5F414C52454144595F4F50454E4544000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO ISZERO PUSH2 0x1DAB JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F45524332305F544F4B454E5F414444524553530000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x20 DUP3 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1DED JUMPI POP PUSH1 0x40 DUP3 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x1E2D JUMPI POP DUP2 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO ISZERO PUSH2 0x1E9A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F5452414445525F4144445245535345530000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x60 ADD MLOAD PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1EAC JUMPI INVALID JUMPDEST EQ DUP1 PUSH2 0x1EC7 JUMPI POP PUSH1 0x1 DUP3 PUSH1 0x60 ADD MLOAD PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1EC5 JUMPI INVALID JUMPDEST EQ JUMPDEST ISZERO ISZERO PUSH2 0x1F34 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F54524144455F545950450000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x7 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x9 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x2 OR SWAP1 SSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1F85 JUMPI INVALID JUMPDEST PUSH1 0x40 DUP1 DUP5 ADD MLOAD PUSH1 0x20 DUP1 DUP7 ADD MLOAD DUP7 MLOAD PUSH1 0x80 DUP1 DUP10 ADD MLOAD PUSH1 0xA0 DUP1 DUP12 ADD MLOAD PUSH2 0x100 DUP13 ADD MLOAD DUP10 MLOAD DUP15 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP7 DUP8 AND SWAP9 DUP2 ADD SWAP9 SWAP1 SWAP9 MSTORE DUP8 DUP11 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP8 ADD MSTORE SWAP2 DUP6 ADD MSTORE SWAP5 MLOAD SWAP4 DUP2 AND SWAP5 SWAP2 AND SWAP3 PUSH32 0xCE97A5A77A419598C6F287194FCA925E3BFF579C4DB6B9FA1A7ADAD422E60FD0 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x2082 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x55494E543235365F554E444552464C4F57000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO ISZERO ISZERO PUSH2 0x2125 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F32305F4C454E4754485F5245 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST POP ADD PUSH1 0x14 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14A0 DUP4 DUP4 PUSH2 0x21E9 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP3 PUSH2 0x140 ADD MLOAD PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2165 JUMPI INVALID JUMPDEST EQ SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH2 0x2154 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MLOAD LT PUSH2 0x2196 JUMPI PUSH2 0x2191 DUP3 PUSH1 0x0 PUSH4 0xFFFFFFFF PUSH2 0x21E9 AND JUMP JUMPDEST PUSH2 0x2199 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SGT ISZERO PUSH2 0x21B9 JUMPI PUSH2 0x21B4 DUP5 DUP5 DUP5 DUP5 PUSH2 0x14A7 JUMP JUMPDEST PUSH2 0x21D1 JUMP JUMPDEST PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x21D1 JUMPI PUSH2 0x21D1 DUP5 DUP4 DUP6 DUP5 PUSH1 0x0 SUB PUSH2 0x14A7 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH2 0x2154 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH2 0x2154 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO ISZERO ISZERO PUSH2 0x2286 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F33325F4C454E4754485F5245 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x160 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 PUSH1 0x60 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x22EE JUMPI INVALID JUMPDEST SWAP1 MSTORE SWAP1 JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 PC INVALID 0xd8 0xe0 0xec 0xd8 SWAP13 JUMPDEST 0x2d SWAP15 ADDMOD 0xc0 0x1e 0xef SLT 0x4f 0xdf PUSH18 0x1CEBBB09F25F1226837877719FF100290000 ",
				"sourceMap": "57:263:1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2940:122:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2940:122:2;;;;;;;;;;;;;;;;;;;;;;;;;;182:49:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;182:49:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;182:49:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2181:202:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2181:202:0;;;;;;;;;;;;;;;;;;;;;;;;;;;3968:91;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3968:91:0;;;;;;;;;;;;;;;;;;;;3213:729:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3213:729:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1266:204:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1266:204:0;;;;;;;;;;;;;;141:35:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;141:35:1;;;;;;;;;;;;;;;;;;;;;;;2897:207:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2897:207:0;;;;;;;;;4277:106;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4277:106:0;;;;;;;237:37:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;237:37:1;;;;3618:207:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3618:207:0;;;;;;;;;722:139;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;722:139:0;;;;;;;;;4718:134;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4718:134:0;;;;;;;;;;;;3068:139:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3068:139:2;;;;;;;;;;;1758:1176;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1758:1176:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2940:122;3029:26;;3004:6;3029:26;;;:19;:26;;;;;;;;;2940:122::o;182:49:1:-;;;;;;;;;;;;;;;;;;;:::o;2181:202:0:-;2276:10;2248:4;2264:23;;;:11;:23;;;;;;;;;:32;;;;;;;;;;;:40;;;2319:36;;;;;;;2248:4;;2264:32;;2276:10;;2319:36;;;;;;;;-1:-1:-1;2372:4:0;2181:202;;;;:::o;3968:91::-;4014:7;4040:12;3968:91;:::o;3213:729:2:-;3288:13;3311;3334;3357:19;3386:14;3410;3434:17;3461:18;3489:14;3513:17;3540:19;3576:17;;:::i;:::-;3596:24;;;;:10;:24;;;;;;;;;3576:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3596:24;;3576:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3638:1;:7;;;3630:15;;3663:1;:7;;;3655:15;;3688:1;:7;;;3680:15;;3717:1;:11;;;3705:23;;3747:1;:8;;;3738:17;;3774:1;:8;;;3765:17;;3804:1;:11;;;3792:23;;3838:1;:12;;;3825:25;;3869:1;:8;;;3860:17;;3899:1;:11;;;3887:23;;3928:1;:7;;;3920:15;;3213:729;;;;;;;;;;;;;;:::o;1266:204:0:-;1347:4;1363:43;1382:4;1388:10;1400:5;1363:18;:43::i;:::-;1416:26;1426:4;1432:2;1436:5;1416:9;:26::i;:::-;-1:-1:-1;1459:4:0;1266:204;;;;;:::o;141:35:1:-;174:2;141:35;:::o;2897:207:0:-;2974:4;2998:21;;;;;2990:30;;;;;;3030:46;3049:10;3061:7;3070:5;3030:18;:46::i;:::-;-1:-1:-1;3093:4:0;2897:207;;;;:::o;4277:106::-;4360:16;;4334:7;4360:16;;;:9;:16;;;;;;;4277:106::o;237:37:1:-;;;;;;;;;;;;;;;;;;;:::o;3618:207:0:-;3695:4;3719:21;;;;;3711:30;;;;;;3751:46;3770:10;3782:7;3791:5;3751:18;:46::i;722:139::-;785:4;801:32;811:10;823:2;827:5;801:9;:32::i;4718:134::-;4818:18;;;;4792:7;4818:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;4718:134::o;3068:139:2:-;3171:22;;;3145:7;3171:22;;;:15;:22;;;;;;;;:29;;;;;;;;;;;3068:139;;;;:::o;1758:1176::-;1915:4;1931:17;;:::i;:::-;2219:11;2368:14;2515;2560:17;1951:31;1969:12;;1951:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1951:17:2;;-1:-1:-1;;;;;1951:31:2:i;:::-;1931:51;;2004:1;:7;;;1996:15;;:4;:15;;;1992:218;;;2027:12;;;:7;;;:12;1992:218;;;2066:1;:7;;;2060:13;;:2;:13;;;2056:154;;;2089:14;;;;:7;;;:14;2117:12;;:7;;;:12;2056:154;;;2160:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2056:154;2233:24;2255:1;2233:21;:24::i;:::-;2219:38;-1:-1:-1;2296:17:2;2271:15;;;;:10;:15;;;;;:21;;;;;:42;;;;;;;;;2267:92;;2333:15;;;;:10;:15;;;;;;;;;2329:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2333:15;;2329:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2329:19:2;-1:-1:-1;2267:92:2;2385:25;2393:1;:8;;;2403:6;2385:7;:25::i;:::-;2451:8;;;;2368:42;;-1:-1:-1;2441:18:2;;;2420:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2591:8:2;;;;2533:16;;;;2581:18;;2639:268;;;;2668:56;2682:1;:7;;;2691:1;:7;;;2708:4;2715:1;:8;;;2668:13;:56::i;:::-;2738:20;2751:3;2756:1;2738:12;:20::i;:::-;2639:268;;;2779:12;2775:132;;;2807:30;2821:3;2826:1;2829:7;;2807:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2807:13:2;;-1:-1:-1;;;;;2807:30:2:i;2775:132::-;2868:28;2881:3;2886:1;2889:6;2868:12;:28::i;:::-;-1:-1:-1;2923:4:2;;1758:1176;-1:-1:-1;;;;;;;;;;;;1758:1176:2:o;6738:310:0:-;6848:1;6840:5;:9;:49;;;;-1:-1:-1;6862:18:0;;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;6853:36;;;6840:49;6832:58;;;;;;;;6938:18;;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;6930:43;;6967:5;6930:7;:43::i;:::-;6900:18;;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:73;;;6988:53;;;;;;;6900:27;;:18;;6988:53;;;;;;;;;;6738:310;;;:::o;5148:286::-;5243:1;5235:5;:9;:37;;;;-1:-1:-1;5257:15:0;;;;;;;:9;:15;;;;;;5248:24;;;5235:37;5227:46;;;;;;;;5309:15;;;;;;;:9;:15;;;;;;5301:31;;5326:5;5301:7;:31::i;:::-;5283:15;;;;;;;;:9;:15;;;;;;:49;;;;5366:13;;;;;;;5358:29;;5381:5;5358:7;:29::i;:::-;5342:13;;;;;;;;:9;:13;;;;;;;;;:45;;;;5402:25;;;;;;;5342:13;;5402:25;;;;;;;;;;;;;5148:286;;;:::o;5951:270::-;6061:1;6053:9;;6045:18;;;;;;6111;;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;6103:43;;6140:5;6103:7;:43::i;9039:987:2:-;9101:8;;:::i;:::-;9224:13;9270;9316:19;9397:14;9444;9492:17;9543:18;9142:4;:11;9157:3;9142:18;9121:93;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9240:20;:4;9257:2;9240:20;:16;:20;:::i;:::-;9224:36;-1:-1:-1;9286:20:2;:4;9303:2;9286:20;:16;:20;:::i;:::-;9270:36;;9350:1;9339:12;;:4;9344:2;9339:8;;;;;;;;;;;;;;;;;;;;:12;;;;:47;;9371:15;9339:47;;;9354:14;9339:47;9316:71;-1:-1:-1;9414:20:2;:4;9431:2;9414:20;:16;:20;:::i;:::-;9397:37;-1:-1:-1;9461:21:2;:4;9478:3;9461:21;:16;:21;:::i;:::-;9444:38;-1:-1:-1;9512:21:2;:4;9529:3;9512:21;:16;:21;:::i;:::-;9492:41;-1:-1:-1;9564:21:2;:4;9581:3;9564:21;:16;:21;:::i;:::-;9543:42;-1:-1:-1;9616:19:2;;;;;;;:42;;-1:-1:-1;9639:19:2;;;;;9616:42;9595:120;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9755:1;9746:6;:10;:24;;;;;9769:1;9760:6;:10;9746:24;:41;;;;;9786:1;9774:9;:13;9746:41;:59;;;;;9804:1;9791:10;:14;9746:59;9725:134;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9876:143;;;;;;;;;9898:5;9876:143;;;;;;9905:5;9876:143;;;;;;9920:1;9876:143;;;;;;9924:9;9876:143;;;;;;;;;;;;9935:6;9876:143;;;;9943:6;9876:143;;;;9963:9;9876:143;;;;9974:10;9876:143;;;;9986:1;9876:143;;;;9989:1;9876:143;;;;9992:17;9876:143;;;;;;;;;;9869:150;9039:987;-1:-1:-1;;;;;;;;;9039:987:2:o;10032:360::-;10105:7;10124:17;10174:1;:7;;;10195:1;:7;;;10216:1;:7;;;10237:1;:11;;;10262:1;:8;;;10284:1;:8;;;10306:1;:11;;;10331:1;:12;;;10144:209;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;10144:209:2;;;10124:229;;10380:4;10370:15;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;139:12;;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;;254:3;250:22;246:30;;311:9;;295:26;;;340:21;;377:20;;;;365:33;;10370:15:2;;;;;;;;;;;;-1:-1:-1;;;;;;10032:360:2:o;717:230:5:-;803:7;838:5;;;874:6;;;;853:69;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;939:1;717:230;-1:-1:-1;;;717:230:5:o;6467:2267:2:-;6606:4;6600:11;6781:66;6776:3;6769:79;6884:4;6877;6872:3;6868:14;6861:28;6925:2;6918:4;6913:3;6909:14;6902:26;6964:6;6957:4;6952:3;6948:14;6941:30;7380:4;7329:3;7286:4;7233:3;7187:1;7129:5;7086:3;7064:371;8115:1;8109:3;8103:10;8100:17;8073:4;8057:14;8054:24;8029:106;7996:14;7989:22;7969:180;7960:7;7956:194;7945:205;;8233:4;8228:3;8224:14;8218:4;8211:28;8333:7;8326:15;8323:2;;;8373:66;8367:4;8360:80;8470:66;8464:4;8457:80;8567:66;8561:4;8554:80;8664:4;8658;8651:18;8699:4;8693;8686:18;8323:2;6575:2153;;;;;;:::o;3952:1096::-;4744:24;4046:16;4060:1;4046:13;:16::i;:::-;:50;;;;-1:-1:-1;4066:15:2;;;;:10;:15;;;;;:25;;;:30;4046:50;4025:120;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4176:7;;:21;;;;4155:95;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4281:7;;;;:21;;;;;;:46;;-1:-1:-1;4306:7:2;;;;:21;;;;4281:46;:68;;;;;4342:1;:7;;;4331:18;;:1;:7;;;:18;;;;4281:68;4260:139;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4445:15;4430:1;:11;;;:30;;;;;;;;;:63;;;-1:-1:-1;4479:14:2;4464:1;:11;;;:29;;;;;;;;;4430:63;4409:128;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4620:15;;;;:10;:15;;;;;;;;;:19;;;;;;;;;;;;;;;;;;;-1:-1:-1;4620:19:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:15;;:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;4649:15:2;;;;:10;:15;;;;;4677:3;4649:25;;;:31;4690:21;;:44;;4714:20;;4690:21;:44;;4714:20;;4690:44;;;;-1:-1:-1;;4791:7:2;;;;;;4771:28;;;;;;;;:19;:28;;;;;;;;4825:7;;4809:24;;;;:15;:24;;;;;4771:28;;;;4809:43;;;;;;;;;:49;;;4888:7;;4868:28;;;;;;;;;;;:52;;;;4771:28;4899:21;;;4868:52;;;;;;4982:11;;;;4771:28;;4935:106;;;;;;;4973:1;:7;;;4935:106;;4964:1;:7;;;4935:106;;;4950:3;4955:1;:7;;;4995:1;:8;;;5005:1;:8;;;5015:1;:11;;;5028:1;:12;;;4935:106;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3952:1096;;;:::o;5915:546::-;6149:10;6023:19;6040:1;6023:16;:19::i;:::-;6022:20;6001:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6162:18;6175:4;6162:12;:18::i;:::-;6149:31;;6240:51;6260:1;:7;;;6269:1;:7;;;6278:1;:7;;;6287:3;6240:19;:51::i;:::-;6301:15;;;;:10;:15;;;;;:21;;:44;;;;6325:20;6301:44;;;6407:11;;;;6301:44;6360:94;;;;;;;6398:7;;;;;6389;;;;;6380;;6420:8;;;;;6430;;;;;6440;;;;6360:94;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5915:546;;;;:::o;5058:851::-;5168:19;5185:1;5168:16;:19::i;:::-;:43;;;;5191:20;5209:1;5191:17;:20::i;:::-;5147:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5291:7;;:21;;;;5270:95;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5396:7;;;;:21;;;;;;:46;;-1:-1:-1;5421:7:2;;;;:21;;;;5396:46;:68;;;;;5457:1;:7;;;5446:18;;:1;:7;;;:18;;;;5396:68;5375:139;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5560:15;5545:1;:11;;;:30;;;;;;;;;:63;;;-1:-1:-1;5594:14:2;5579:1;:11;;;:29;;;;;;;;;5545:63;5524:128;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5712:15;;;;:10;:15;;;;;:22;;;:31;;;5753:21;;:45;;;;5777:21;5753:45;;;5860:11;;;;5753:45;5813:89;;;;;;;5851:7;;;;;5842;;;;;5833;;5873:8;;;;;5883;;;;;5893;;;;5813:89;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5058:851;;;:::o;503:208:5:-;589:7;633:6;;;;612:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;699:5:5;;;503:208::o;10269:886:4:-;10390:14;10453:5;10461:2;10453:10;10441:1;:8;:22;;10420:135;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11057:13:4;10802:2;11057:13;11051:20;11073:42;11047:69;;10269:886::o;14709:220::-;14830:14;14877:21;14889:1;14892:5;14877:11;:21::i;10592:123:2:-;10657:4;;10680:28;:1;:7;;;:28;;;;;;;;;;10592:123;-1:-1:-1;;10592:123:2:o;11128:129::-;11196:4;11230:20;11219:31;;10398:188;10455:6;10535:2;10521:4;:11;:16;:58;;10559:19;:4;10576:1;10559:19;:16;:19;:::i;:::-;10521:58;;;10547:1;10521:58;10514:65;10398:188;-1:-1:-1;;10398:188:2:o;8740:293::-;8857:1;8848:6;:10;8844:183;;;8874:47;8888:5;8895:4;8901:2;8913:6;8874:13;:47::i;:::-;8844:183;;;8951:1;8942:6;:10;8938:89;;;8968:48;8982:5;8989:2;8993:4;9008:6;9007:7;;8968:13;:48::i;:::-;8740:293;;;;:::o;10721:129::-;10789:4;10823:20;10812:31;;10856:131;10925:4;10959:21;10948:32;;13291:490:4;13412:14;13475:5;13483:2;13475:10;13463:1;:8;:22;;13442:107;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;13728:13:4;13630:2;13728:13;13722:20;;13291:490::o;57:263:1:-;;;;;;;;;-1:-1:-1;57:263:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o"
			}
		}
	},
	"sources": {
		"src/RDXToken.sol": {
			"id": 1
		},
		"src/RoboDexToken.sol": {
			"id": 2
		},
		"@0x/contracts-utils/contracts/src/LibBytes.sol": {
			"id": 4
		},
		"src/ERC20Token.sol": {
			"id": 0
		},
		"@0x/contracts-utils/contracts/src/SafeMath.sol": {
			"id": 5
		},
		"src/interfaces/IERC20Token.sol": {
			"id": 3
		}
	},
	"sourceCodes": {
		"src/RDXToken.sol": "pragma solidity ^0.4.24;\n\nimport \"./RoboDexToken.sol\";\n\n\ncontract RDXToken is RoboDexToken {\n    // solhint-disable const-name-snakecase\n    uint8 constant public decimals = 18;\n    string constant public name = \"0x Protocol Token\";\n    string constant public symbol = \"RDX\";\n    // solhint-enable const-name-snakecase\n}\n",
		"src/RoboDexToken.sol": "pragma solidity ^0.4.24;\n\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"./ERC20Token.sol\";\n\n\ncontract RoboDexToken is ERC20Token {\n    using LibBytes for bytes;\n\n    // STRUCTURES\n\n    enum TradeType {\n        SHORT, // SELL\n        LONG   // BUY\n    }\n\n    enum PositionState {\n        NEW,\n        OPENED,\n        FILLING,\n        FILLED,\n        CLOSED\n    }\n\n    struct Position {\n        address token;\n        address maker;\n        address taker;\n        TradeType tradeType;\n        uint256 amount;\n        uint256 margin;\n        uint256 openPrice;\n        uint256 closePrice;\n        uint256 filled;\n        uint256 timestamp;\n        PositionState state;\n    }\n\n    // EVENTS\n\n    /// @dev Emits when position is opened.\n    event PositionOpened(\n        bytes32 id,\n        address token,\n        address indexed maker,\n        address indexed taker,\n        TradeType indexed tradeType,\n        uint256 amount,\n        uint256 margin,\n        uint256 openPrice,\n        uint256 closePrice\n    );\n\n    /// @dev Emits when position is opened.\n    event PositionFilled(\n        bytes32 id,\n        address token,\n        address indexed maker,\n        address indexed taker,\n        TradeType indexed tradeType,\n        uint256 amount,\n        uint256 margin,\n        uint256 filled\n    );\n\n    /// @dev Emits when position is closed.\n    event PositionClosed(\n        bytes32 id,\n        address token,\n        address indexed maker,\n        address indexed taker,\n        TradeType indexed tradeType,\n        uint256 amount,\n        uint256 margin,\n        uint256 filled,\n        int256 pnl\n    );\n    \n    // EXTERNAL FUNCTIONS\n\n    constructor() public {\n        _timeToLive = block.timestamp + INITIAL_LIFETIME;\n    }\n\n    function peddle(\n        address from,\n        address to,\n        uint256 amount,\n        bytes positionData,\n        bytes dexData\n    ) external returns (bool) {\n        Position memory p = parsePositionData(positionData);\n        if (from == p.maker) {\n            p.taker = to;\n        } else if (to == p.maker) {\n            p.maker = from;\n            p.taker = to;\n        } else {\n            revert(\"INVALID_CALL_FROM_ASSET_PROXY\");\n        }\n        bytes32 pId = calculatePositionHash(p);\n        if (_positions[pId].state != PositionState.NEW) {\n            p = _positions[pId];\n        }\n        uint256 filled = safeAdd(p.filled, amount);\n        require(\n            filled <= p.amount,\n            \"INVALID_ASSET_AMOUNT\"\n        );\n        bool isCreated = (filled == amount);\n        bool isFullFilled = (filled == p.amount);\n        // TODO: More checks\n        if (isCreated) {\n            transferToken(p.token, p.maker, address(this), p.margin);\n            openPosition(pId, p);\n        } else if (isFullFilled) {\n            closePosition(pId, p, dexData);\n        } else {\n            fillPosition(pId, p, filled);\n        }\n        return true;\n    }\n\n    function getPositionCount(address maker) external view returns (uint64) {\n        return _positionHashCounts[maker];\n    }\n\n    function getPositionHash(address maker, uint64 index) external view returns (bytes32) {\n        return _positionHashes[maker][index];\n    }\n\n    function getPosition(bytes32 positionHash) external view returns (\n        address token,\n        address maker,\n        address taker,\n        TradeType tradeType,\n        uint256 amount,\n        uint256 margin,\n        uint256 openPrice,\n        uint256 closePrice,\n        uint256 filled,\n        uint256 timestamp,\n        PositionState state\n    ) {\n        Position memory p = _positions[positionHash];\n        token = p.token;\n        maker = p.maker;\n        taker = p.taker;\n        tradeType = p.tradeType;\n        amount = p.amount;\n        margin = p.margin;\n        openPrice = p.openPrice;\n        closePrice = p.closePrice;\n        filled = p.filled;\n        timestamp = p.timestamp;\n        state = p.state;\n    }\n    \n    function openPosition(bytes32 pId, Position memory p) internal {\n        require(\n            isPositionNew(p) && _positions[pId].timestamp == 0,\n            \"POSITION_ALREADY_OPENED\"\n        );\n        require(\n            p.token != address(0),\n            \"INVALID_ERC20_TOKEN_ADDRESS\"\n        );\n        require(\n            p.maker != address(0) && p.taker != address(0) && p.maker != p.taker,\n            \"INVALID_TRADER_ADDRESSES\"\n        );\n        require(\n            p.tradeType == TradeType.SHORT || p.tradeType == TradeType.LONG,\n            \"INVALID_TRADE_TYPE\"\n        );\n        // TODO: Add more checks (amount, margin, openPrice, closePrice)\n        _positions[pId] = p;\n        _positions[pId].timestamp = now;\n        _positions[pId].state = PositionState.OPENED;\n        uint64 positionHashIndex = _positionHashCounts[p.maker];\n        _positionHashes[p.maker][positionHashIndex] = pId;\n        _positionHashCounts[p.maker] = positionHashIndex + 1;\n        emit PositionOpened(pId, p.token, p.maker, p.taker, p.tradeType, p.amount, p.margin, p.openPrice, p.closePrice);\n    }\n    \n    function fillPosition(bytes32 pId, Position memory p, uint256 filled) internal {\n        require(\n            isPositionOpened(p) || isPositionFilling(p),\n            \"POSITION_ALREADY_OPENED\"\n        );\n        require(\n            p.token != address(0),\n            \"INVALID_ERC20_TOKEN_ADDRESS\"\n        );\n        require(\n            p.maker != address(0) && p.taker != address(0) && p.maker != p.taker,\n            \"INVALID_TRADER_ADDRESSES\"\n        );\n        require(\n            p.tradeType == TradeType.SHORT || p.tradeType == TradeType.LONG,\n            \"INVALID_TRADE_TYPE\"\n        );\n        // TODO: Add more checks (amount, margin)\n        _positions[pId].filled = filled;\n        _positions[pId].state = PositionState.FILLING;\n        emit PositionFilled(pId, p.token, p.maker, p.taker, p.tradeType, p.amount, p.margin, p.filled);\n    }\n\n    function closePosition(bytes32 pId, Position memory p, bytes data) internal {\n        require(\n            !isPositionClosed(p),\n            \"POSITION_ALREADY_CLOSED\"\n        );\n        // TODO: Add more checks (margin, data)\n        int256 pnl = calculatePNL(data);\n        // TODO: Liquidate trades in the position\n        transferTokenSigned(p.token, p.maker, p.taker, pnl);\n        _positions[pId].state = PositionState.CLOSED;\n        emit PositionClosed(pId, p.token, p.maker, p.taker, p.tradeType, p.amount, p.margin, p.filled, pnl);\n    }\n\n    function transferToken(address token, address from, address to, uint256 amount) internal {\n        assembly {\n            let ptr := mload(0x40)\n            // Setup `ERC20Token.transferFrom` input data\n            // bytes4(keccak256(\"transferFrom(address,address,uint256)\")) = 0x23b872dd\n            mstore(ptr, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\n            mstore(add(ptr, 0x04), from)\n            mstore(add(ptr, 0x24), to)\n            mstore(add(ptr, 0x44), amount)\n            // Call `ERC20Token.transferFrom` using the calldata\n            let success := call(\n                gas,    // forward all gas\n                token,  // call address of token contract\n                0,      // don't send any ETH\n                ptr,    // pointer to start of input\n                0x64,   // length of input\n                ptr,    // write output over input\n                0x20    // output size should be 32 bytes\n            )\n            // Check return data\n            // If there is no return data, we assume the token incorrectly\n            // does not return a bool. In this case we expect it to revert\n            // on failure, which was handled above.\n            // If the token does return data, we require that it is a single\n            // nonzero 32 bytes value.\n            // So the transfer succeeded if the call succeeded and either\n            // returned nothing, or returned a non-zero 32 byte value. \n            success := and(success, or(\n                iszero(returndatasize),\n                and(\n                    eq(returndatasize, 0x20),\n                    gt(mload(ptr), 0)\n                )\n            ))\n            // Set storage pointer to new space\n            mstore(0x40, add(ptr, 0x64))\n            // Revert with `Error(\"TRANSFER_FAILED\")` in case of error\n            if iszero(success) {\n                mstore(0x00, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                mstore(0x20, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                mstore(0x40, 0x0000000f5452414e534645525f4641494c454400000000000000000000000000)\n                mstore(0x60, 0x00)\n                revert(0x00, 0x64)\n            }\n        }\n    }\n\n    function transferTokenSigned(address token, address from, address to, int256 amount) internal {\n        if (amount > 0) {\n            transferToken(token, from, to, uint256(amount));\n        } else if (amount < 0) {\n            transferToken(token, to, from, uint256(-amount));\n        }\n    }\n\n    function parsePositionData(bytes data) internal pure returns (Position) {\n        require(\n            data.length == 224,\n            \"INVALID_POSITION_DATA_LENGTH\"\n        );\n        address token = data.readAddress(12);\n        address maker = data.readAddress(44);\n        TradeType tradeType = (data[95] > 0 ? TradeType.LONG : TradeType.SHORT);\n        uint256 amount = data.readUint256(96);\n        uint256 margin = data.readUint256(128);\n        uint256 openPrice = data.readUint256(160);\n        uint256 closePrice = data.readUint256(192);\n        require(\n            token != address(0) && maker != address(0),\n            \"INVALID_POSITION_DATA_ADDRESSES\"\n        );\n        require(\n            amount > 0 && margin > 0 && openPrice > 0 && closePrice > 0,\n            \"INVALID_POSITION_DATA_VALUES\"\n        );\n        return Position(\n            token, maker, address(0), tradeType, amount, margin,\n            openPrice, closePrice, 0, 0, PositionState.NEW\n        );\n    }\n\n    function calculatePositionHash(Position memory p) internal pure returns (bytes32) {\n        bytes memory data = abi.encodePacked(\n            p.token,\n            p.maker,\n            p.taker,\n            p.tradeType,\n            p.amount,\n            p.margin,\n            p.openPrice,\n            p.closePrice\n        );\n        return keccak256(data);\n    }\n\n    function calculatePNL(bytes data) internal pure returns (int256) {\n        // TODO: Calculate PNL carefully\n        return data.length < 32 ? int256(0) : int256(data.readBytes32(0));\n    }\n\n    function isPositionNew(Position memory p) internal pure returns (bool) {\n        return p.state == PositionState.NEW;\n    }\n\n    function isPositionOpened(Position memory p) internal pure returns (bool) {\n        return p.state == PositionState.OPENED;\n    }\n\n    function isPositionFilling(Position memory p) internal pure returns (bool) {\n        return p.state == PositionState.FILLING;\n    }\n\n    function isPositionFilled(Position memory p) internal pure returns (bool) {\n        return p.state == PositionState.FILLED;\n    }\n\n    function isPositionClosed(Position memory p) internal pure returns (bool) {\n        return p.state == PositionState.CLOSED;\n    }\n\n    // FIELDS\n\n    // Storage of open positions\n    mapping (bytes32 => Position) internal _positions;\n\n    // Storage of all known position IDs by account\n    mapping (address => mapping (uint64 => bytes32)) internal _positionHashes;\n    mapping (address => uint64) internal _positionHashCounts;\n\n    // TTL which is not used yet\n    uint256 internal _timeToLive;\n\n    uint256 private constant INITIAL_LIFETIME = 21 days;\n}\n",
		"@0x/contracts-utils/contracts/src/LibBytes.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\n\nlibrary LibBytes {\n\n    using LibBytes for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n    \n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n                    \n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n                    \n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        require(\n            from <= to,\n            \"FROM_LESS_THAN_TO_REQUIRED\"\n        );\n        require(\n            to < b.length,\n            \"TO_LESS_THAN_LENGTH_REQUIRED\"\n        );\n        \n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n    \n    /// @dev Returns a slice from a byte array without preserving the input.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    /// @dev When `from == 0`, the original array will match the slice. In other cases its state will be corrupted.\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        require(\n            from <= to,\n            \"FROM_LESS_THAN_TO_REQUIRED\"\n        );\n        require(\n            to < b.length,\n            \"TO_LESS_THAN_LENGTH_REQUIRED\"\n        );\n        \n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        require(\n            b.length > 0,\n            \"GREATER_THAN_ZERO_LENGTH_REQUIRED\"\n        );\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Pops the last 20 bytes off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The 20 byte address that was popped off.\n    function popLast20Bytes(bytes memory b)\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= 20,\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\n        );\n\n        // Store last 20 bytes.\n        result = readAddress(b, b.length - 20);\n\n        assembly {\n            // Subtract 20 from byte array length.\n            let newLen := sub(mload(b), 20)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n            \n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        require(\n            b.length >= index + 32,\n            \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\"\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 32,\n            \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\"\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        require(\n            b.length >= index + 4,\n            \"GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED\"\n        );\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Reads nested bytes from a specific position.\n    /// @dev NOTE: the returned value overlaps with the input value.\n    ///            Both should be treated as immutable.\n    /// @param b Byte array containing nested bytes.\n    /// @param index Index of nested bytes.\n    /// @return result Nested bytes.\n    function readBytesWithLength(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Read length of nested bytes\n        uint256 nestedBytesLength = readUint256(b, index);\n        index += 32;\n\n        // Assert length of <b> is valid, given\n        // length of nested bytes\n        require(\n            b.length >= index + nestedBytesLength,\n            \"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\"\n        );\n        \n        // Return a pointer to the byte array as it exists inside `b`\n        assembly {\n            result := add(b, index)\n        }\n        return result;\n    }\n\n    /// @dev Inserts bytes at a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes to insert.\n    function writeBytesWithLength(\n        bytes memory b,\n        uint256 index,\n        bytes memory input\n    )\n        internal\n        pure\n    {\n        // Assert length of <b> is valid, given\n        // length of input\n        require(\n            b.length >= index + 32 + input.length,  // 32 bytes to store length\n            \"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\"\n        );\n\n        // Copy <input> into <b>\n        memCopy(\n            b.contentAddress() + index,\n            input.rawAddress(), // includes length of <input>\n            input.length + 32   // +32 bytes to store <input> length\n        );\n    }\n\n    /// @dev Performs a deep copy of a byte array onto another byte array of greater than or equal length.\n    /// @param dest Byte array that will be overwritten with source bytes.\n    /// @param source Byte array to copy onto dest bytes.\n    function deepCopyBytes(\n        bytes memory dest,\n        bytes memory source\n    )\n        internal\n        pure\n    {\n        uint256 sourceLen = source.length;\n        // Dest length must be >= source length, or some bytes would not be copied.\n        require(\n            dest.length >= sourceLen,\n            \"GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED\"\n        );\n        memCopy(\n            dest.contentAddress(),\n            source.contentAddress(),\n            sourceLen\n        );\n    }\n}\n",
		"src/ERC20Token.sol": "pragma solidity ^0.4.24;\n\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"@0x/contracts-utils/contracts/src/SafeMath.sol\";\nimport \"./interfaces/IERC20Token.sol\";\n\n\ncontract ERC20Token is IERC20Token, SafeMath {\n    using LibBytes for bytes;\n\n    // EXTERNAL FUNCTIONS\n\n    constructor() public {\n        _totalSupply = INITIAL_SUPPLY;\n        _balances[msg.sender] = _totalSupply;\n        emit Transfer(address(0), msg.sender, _totalSupply);\n    }\n\n    /// @dev Sends `value` amount of tokens to account `to` from account `msg.sender`.\n    /// @param to The address of the tokens recipient.\n    /// @param value The amount of tokens to be transferred.\n    /// @return True if transfer was successful.\n    function transfer(address to, uint256 value) external returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /// @dev Sends `value` amount of tokens to account `to` from account `from` if enough amount of\n    /// tokens are approved by account `from` to spend by account `msg.sender`.\n    /// @param from The address of the tokens sender.\n    /// @param to The address of the tokens recipient.\n    /// @param value The amount of tokens to be transferred.\n    /// @return True if transfer was successful.\n    function transferFrom(address from, address to, uint256 value) external returns (bool) {\n        _decreaseAllowance(from, msg.sender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /// @dev Approves account with address `spender` to spend `value` amount of tokens on behalf of account `msg.sender`.\n    /// Beware that changing an allowance with this method brings the risk that someone may use both the old\n    /// and the new allowance by an unfortunate transaction ordering. One possible solution to mitigate this\n    /// rare condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n    /// https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    /// @param spender Address which will be allowed to spend the tokens.\n    /// @param value Amount of tokens to allow to be spent.\n    /// @return True if approve was successful.\n    function approve(address spender, uint256 value) external returns (bool) {\n        _allowances[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /// @dev Increases the amount of tokens that account `msg.sender` allowed to spend by account `spender`.\n    /// Method approve() should be called when _allowances[spender] == 0. To decrement allowance\n    /// it is better to use this function to avoid 2 calls (and waiting until the first transaction is mined).\n    /// @param spender The address from which the tokens can be spent.\n    /// @param value The amount of tokens to increase the allowance by.\n    /// @return True if approve was successful.\n    function increaseAllowance(address spender, uint256 value) external returns (bool) {\n        require(spender != address(0));\n        _increaseAllowance(msg.sender, spender, value);\n        return true;\n    }\n\n    /// @dev Decreases the amount of tokens that account `msg.sender` allowed to spend by account `spender`.\n    /// Method approve() should be called when _allowances[spender] == 0. To decrement allowance\n    /// it is better to use this function to avoid 2 calls (and waiting until the first transaction is mined).\n    /// @param spender The address from which the tokens can be spent.\n    /// @param value The amount of tokens to decrease the allowance by.\n    /// @return True if approve was successful.\n    function decreaseAllowance(address spender, uint256 value) external returns (bool) {\n        require(spender != address(0));\n        _decreaseAllowance(msg.sender, spender, value);\n        return true;\n    }\n\n    // EXTERNAL FUNCTIONS (VIEW)\n\n    /// @dev Returns total amount of supplied tokens.\n    /// @return Total amount of supplied tokens.\n    function totalSupply() external view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /// @dev Returns the balance of account with address `owner`.\n    /// @param owner The address from which the balance will be retrieved.\n    /// @return Amount of tokens hold by account with address `owner`.\n    function balanceOf(address owner) external view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /// @dev Returns the amount of tokens hold by account `owner` and approved to spend by account `spender`.\n    /// @param owner The address of the account owning tokens.\n    /// @param spender The address of the account able to transfer the tokens owning by account `owner`.\n    /// @return Amount of tokens allowed to spend.\n    function allowance(address owner, address spender) external view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    // INTERNAL FUNCTIONS\n\n    /// @dev Transfers tokens from account with address `from` to account with address `to`.\n    /// @param from The address of the tokens sender.\n    /// @param to The address of the tokens recipient.\n    /// @param value The amount of tokens to be transferred.\n    function _transfer(address from, address to, uint256 value) internal {\n        require(value > 0 && value <= _balances[from]);\n        _balances[from] = safeSub(_balances[from], value);\n        _balances[to] = safeAdd(_balances[to], value);\n        emit Transfer(from, to, value);\n    }\n\n    /// @dev Increases the amount of tokens that account `owner` allowed to spend by account `spender`.\n    /// Method approve() should be called when _allowances[spender] == 0. To decrement allowance\n    /// it is better to use this function to avoid 2 calls (and waiting until the first transaction is mined).\n    /// @param owner The address which owns the tokens.\n    /// @param spender The address from which the tokens can be spent.\n    /// @param value The amount of tokens to increase the allowance by.\n    function _increaseAllowance(address owner, address spender, uint256 value) internal {\n        require(value > 0);\n        _allowances[owner][spender] = safeAdd(_allowances[owner][spender], value);\n        emit Approval(owner, spender, _allowances[owner][spender]);\n    }\n\n    /// @dev Decreases the amount of tokens that account `owner` allowed to spend by account `spender`.\n    /// Method approve() should be called when _allowances[spender] == 0. To decrement allowance\n    /// it is better to use this function to avoid 2 calls (and waiting until the first transaction is mined).\n    /// @param owner The address which owns the tokens.\n    /// @param spender The address from which the tokens can be spent.\n    /// @param value The amount of tokens to decrease the allowance by.\n    function _decreaseAllowance(address owner, address spender, uint256 value) internal {\n        require(value > 0 && value <= _allowances[owner][spender]);\n        _allowances[owner][spender] = safeSub(_allowances[owner][spender], value);\n        emit Approval(owner, spender, _allowances[owner][spender]);\n    }\n\n    /// @dev Internal function that mints specified amount of tokens and assigns it to account `receiver`.\n    /// This encapsulates the modification of balances such that the proper events are emitted.\n    /// @param receiver The address that will receive the minted tokens.\n    /// @param value The amount of tokens that will be minted.\n    function _mint(address receiver, uint256 value) internal {\n        require(receiver != address(0));\n        require(value > 0);\n        _balances[receiver] = safeAdd(_balances[receiver], value);\n        _totalSupply = safeAdd(_totalSupply, value);\n        emit Transfer(address(0), receiver, value);\n    }\n\n    /// @dev Internal function that burns specified amount of tokens of a given address.\n    /// @param burner The address from which tokens will be burnt.\n    /// @param value The amount of tokens that will be burnt.\n    function _burn(address burner, uint256 value) internal {\n        require(burner != address(0));\n        require(value > 0 && value <= _balances[burner]);\n        _balances[burner] = safeSub(_balances[burner], value);\n        _totalSupply = safeSub(_totalSupply, value);\n        emit Transfer(burner, address(0), value);\n    }\n\n    // FIELDS\n\n    uint256 internal _totalSupply;\n    mapping (address => uint256) internal _balances;\n    mapping (address => mapping (address => uint256)) internal _allowances;\n\n    // Amount of initially supplied tokens is constant and equals to 1,000,000,000\n    uint256 private constant INITIAL_SUPPLY = 10**27;\n}\n",
		"@0x/contracts-utils/contracts/src/SafeMath.sol": "pragma solidity ^0.4.24;\n\n\ncontract SafeMath {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(\n            c / a == b,\n            \"UINT256_OVERFLOW\"\n        );\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        require(\n            b <= a,\n            \"UINT256_UNDERFLOW\"\n        );\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        require(\n            c >= a,\n            \"UINT256_OVERFLOW\"\n        );\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}\n",
		"src/interfaces/IERC20Token.sol": "pragma solidity ^0.4.24;\n\n\ncontract IERC20Token {\n\n    // EVENTS\n\n    /// @dev Emits when ownership of any tokens changes by any mechanism.\n    /// This event also emits when tokens are created (`from` == 0) and destroyed (`to` == 0).\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    \n    /// @dev Emits when the approved address for a tokens is changed or reaffirmed.\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    // EXTERNAL FUNCTIONS\n\n    /// @dev Sends `value` amount of tokens to account `to` from account `msg.sender`.\n    /// @param to The address of the tokens recipient.\n    /// @param value The amount of tokens to be transferred.\n    /// @return True if transfer was successful.\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /// @dev Sends `value` amount of tokens to account `to` from account `from` if enough amount of\n    /// tokens are approved by account `from` to spend by account `msg.sender`.\n    /// @param from The address of the tokens sender.\n    /// @param to The address of the tokens recipient.\n    /// @param value The amount of tokens to be transferred.\n    /// @return True if transfer was successful.\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n    \n    /// @dev Approves account `spender` by account `msg.sender` to spend `value` amount of tokens.\n    /// @param spender The address of the account able to transfer the tokens.\n    /// @param value The new amount of tokens to be approved for transfer.\n    /// @return True if approve was successful.\n    function approve(address spender, uint256 value) external returns (bool);\n\n    // EXTERNAL FUNCTIONS (VIEW)\n\n    /// @dev Returns total amount of supplied tokens.\n    /// @return Total amount of supplied tokens.\n    function totalSupply() external view returns (uint256);\n    \n    /// @dev Returns the balance of account with address `owner`.\n    /// @param owner The address from which the balance will be retrieved.\n    /// @return Amount of tokens hold by account with address `owner`.\n    function balanceOf(address owner) external view returns (uint256);\n\n    /// @dev Returns the amount of tokens hold by account `owner` and approved to spend by account `spender`.\n    /// @param owner The address of the account owning tokens.\n    /// @param spender The address of the account able to transfer the tokens owning by account `owner`.\n    /// @return Amount of tokens allowed to spend.\n    function allowance(address owner, address spender) external view returns (uint256);\n}\n"
	},
	"sourceTreeHashHex": "0xc5b07e7a2bfe8b2e3ca12cbf79d06db5c68c938038aace83ef688f111773ce9f",
	"compiler": {
		"name": "solc",
		"version": "0.4.25+commit.59dbf8f1.Linux.g++",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 1000000
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			},
			"remappings": [
				"@0x/contracts-utils=/Users/wardencliffe/Documents/Projects/Personal/0x-monorepo-mirror/node_modules/@0x/contracts-utils"
			]
		}
	},
	"networks": {}
}