{
	"schemaVersion": "2.0.0",
	"contractName": "BitDexToken",
	"compilerOutput": {
		"abi": [
			{
				"constant": false,
				"inputs": [
					{
						"name": "spender",
						"type": "address"
					},
					{
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "spender",
						"type": "address"
					},
					{
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "increaseAllowance",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "from",
						"type": "address"
					},
					{
						"name": "to",
						"type": "address"
					},
					{
						"name": "value",
						"type": "uint256"
					},
					{
						"name": "side",
						"type": "uint8"
					},
					{
						"name": "pnl",
						"type": "int256"
					},
					{
						"name": "timeLock",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "owner",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "spender",
						"type": "address"
					},
					{
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "decreaseAllowance",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "to",
						"type": "address"
					},
					{
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "transfer",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "owner",
						"type": "address"
					},
					{
						"name": "spender",
						"type": "address"
					}
				],
				"name": "allowance",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "to",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "side",
						"type": "uint8"
					},
					{
						"indexed": false,
						"name": "value",
						"type": "uint256"
					},
					{
						"indexed": false,
						"name": "pnl",
						"type": "int256"
					},
					{
						"indexed": false,
						"name": "timeLock",
						"type": "uint256"
					}
				],
				"name": "Verify0x",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			}
		],
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b506212750042016002556b033b2e3c9fd0803ce80000006003819055336000818152600460209081526040808320859055805194855251929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3610775806100846000396000f30060806040526004361061008d5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663095ea7b3811461009257806318160ddd146100d757806339509351146100fe57806339e063611461012f57806370a0823114610172578063a457c2d7146101a0578063a9059cbb146101d1578063dd62ed3e14610202575b600080fd5b34801561009e57600080fd5b506100c373ffffffffffffffffffffffffffffffffffffffff60043516602435610236565b604080519115158252519081900360200190f35b3480156100e357600080fd5b506100ec6102a9565b60408051918252519081900360200190f35b34801561010a57600080fd5b506100c373ffffffffffffffffffffffffffffffffffffffff600435166024356102af565b34801561013b57600080fd5b506100c373ffffffffffffffffffffffffffffffffffffffff6004358116906024351660443560ff6064351660843560a4356102e7565b34801561017e57600080fd5b506100ec73ffffffffffffffffffffffffffffffffffffffff6004351661035f565b3480156101ac57600080fd5b506100c373ffffffffffffffffffffffffffffffffffffffff60043516602435610387565b3480156101dd57600080fd5b506100c373ffffffffffffffffffffffffffffffffffffffff600435166024356103b6565b34801561020e57600080fd5b506100ec73ffffffffffffffffffffffffffffffffffffffff600435811690602435166103c3565b33600081815260056020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60035490565b600073ffffffffffffffffffffffffffffffffffffffff831615156102d357600080fd5b6102de3384846103fb565b50600192915050565b60008360018111156102f557fe5b6040805187815260208101869052808201859052905173ffffffffffffffffffffffffffffffffffffffff808a1692908b16917f8217aa7f086df009dfae12be84f967478edb6c67d9ee7aee798330f7714109209181900360600190a45060019695505050505050565b73ffffffffffffffffffffffffffffffffffffffff1660009081526004602052604090205490565b600073ffffffffffffffffffffffffffffffffffffffff831615156103ab57600080fd5b6102de3384846104b8565b60006102de338484610542565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260056020908152604080832093909416825291909152205490565b6000811161040857600080fd5b73ffffffffffffffffffffffffffffffffffffffff8084166000908152600560209081526040808320938616835292905220546104459082610657565b73ffffffffffffffffffffffffffffffffffffffff84811660008181526005602090815260408083209488168084529482529182902085905581519485529051929391927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6000811180156104fa575073ffffffffffffffffffffffffffffffffffffffff8084166000908152600560209081526040808320938616835292905220548111155b151561050557600080fd5b73ffffffffffffffffffffffffffffffffffffffff80841660009081526005602090815260408083209386168352929052205461044590826106d2565b600081118015610577575073ffffffffffffffffffffffffffffffffffffffff83166000908152600460205260409020548111155b151561058257600080fd5b73ffffffffffffffffffffffffffffffffffffffff83166000908152600460205260409020546105b290826106d2565b73ffffffffffffffffffffffffffffffffffffffff80851660009081526004602052604080822093909355908416815220546105ee9082610657565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526004602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000828201838110156106cb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f55494e543235365f4f564552464c4f5700000000000000000000000000000000604482015290519081900360640190fd5b9392505050565b60008282111561074357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f55494e543235365f554e444552464c4f57000000000000000000000000000000604482015290519081900360640190fd5b509003905600a165627a7a72305820a2537811af6194e66dc6c5820a045dff96816c1e5dc0dd73e8cf36b5a8839d0d0029",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x127500 TIMESTAMP ADD PUSH1 0x2 SSTORE PUSH12 0x33B2E3C9FD0803CE8000000 PUSH1 0x3 DUP2 SWAP1 SSTORE CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 SWAP1 SSTORE DUP1 MLOAD SWAP5 DUP6 MSTORE MLOAD SWAP3 SWAP4 SWAP2 SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 PUSH2 0x775 DUP1 PUSH2 0x84 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x8D JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x95EA7B3 DUP2 EQ PUSH2 0x92 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xD7 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0xFE JUMPI DUP1 PUSH4 0x39E06361 EQ PUSH2 0x12F JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x172 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x1A0 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x1D1 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x202 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x236 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEC PUSH2 0x2A9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x2AF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD DUP2 AND SWAP1 PUSH1 0x24 CALLDATALOAD AND PUSH1 0x44 CALLDATALOAD PUSH1 0xFF PUSH1 0x64 CALLDATALOAD AND PUSH1 0x84 CALLDATALOAD PUSH1 0xA4 CALLDATALOAD PUSH2 0x2E7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x17E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEC PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH2 0x35F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x387 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x3B6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x20E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEC PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD DUP2 AND SWAP1 PUSH1 0x24 CALLDATALOAD AND PUSH2 0x3C3 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP7 SWAP1 SSTORE DUP2 MLOAD DUP7 DUP2 MSTORE SWAP2 MLOAD SWAP4 SWAP5 SWAP1 SWAP4 SWAP1 SWAP3 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP3 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND ISZERO ISZERO PUSH2 0x2D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2DE CALLER DUP5 DUP5 PUSH2 0x3FB JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x2F5 JUMPI INVALID JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP7 SWAP1 MSTORE DUP1 DUP3 ADD DUP6 SWAP1 MSTORE SWAP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP11 AND SWAP3 SWAP1 DUP12 AND SWAP2 PUSH32 0x8217AA7F086DF009DFAE12BE84F967478EDB6C67D9EE7AEE798330F771410920 SWAP2 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG4 POP PUSH1 0x1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND ISZERO ISZERO PUSH2 0x3AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2DE CALLER DUP5 DUP5 PUSH2 0x4B8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2DE CALLER DUP5 DUP5 PUSH2 0x542 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x408 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH2 0x445 SWAP1 DUP3 PUSH2 0x657 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP9 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE DUP2 MLOAD SWAP5 DUP6 MSTORE SWAP1 MLOAD SWAP3 SWAP4 SWAP2 SWAP3 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x4FA JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD DUP2 GT ISZERO JUMPDEST ISZERO ISZERO PUSH2 0x505 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH2 0x445 SWAP1 DUP3 PUSH2 0x6D2 JUMP JUMPDEST PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x577 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 GT ISZERO JUMPDEST ISZERO ISZERO PUSH2 0x582 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x5B2 SWAP1 DUP3 PUSH2 0x6D2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP5 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x5EE SWAP1 DUP3 PUSH2 0x657 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP4 SWAP3 DUP8 AND SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x6CB JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x55494E543235365F4F564552464C4F5700000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x743 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x55494E543235365F554E444552464C4F57000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 LOG2 MSTORE8 PUSH25 0x11AF6194E66DC6C5820A045DFF96816C1E5DC0DD73E8CF36B5 0xa8 DUP4 SWAP14 0xd STOP 0x29 ",
				"sourceMap": "182:10671:1:-;;;495:223;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;558:7:1;540:15;:25;526:11;:39;10844:6;575:12;:29;;;624:10;-1:-1:-1;614:21:1;;;:9;:21;;;;;;;;:36;;;665:46;;;;;;624:10;;-1:-1:-1;;665:46:1;;;;;;;;;;182:10671;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x60806040526004361061008d5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663095ea7b3811461009257806318160ddd146100d757806339509351146100fe57806339e063611461012f57806370a0823114610172578063a457c2d7146101a0578063a9059cbb146101d1578063dd62ed3e14610202575b600080fd5b34801561009e57600080fd5b506100c373ffffffffffffffffffffffffffffffffffffffff60043516602435610236565b604080519115158252519081900360200190f35b3480156100e357600080fd5b506100ec6102a9565b60408051918252519081900360200190f35b34801561010a57600080fd5b506100c373ffffffffffffffffffffffffffffffffffffffff600435166024356102af565b34801561013b57600080fd5b506100c373ffffffffffffffffffffffffffffffffffffffff6004358116906024351660443560ff6064351660843560a4356102e7565b34801561017e57600080fd5b506100ec73ffffffffffffffffffffffffffffffffffffffff6004351661035f565b3480156101ac57600080fd5b506100c373ffffffffffffffffffffffffffffffffffffffff60043516602435610387565b3480156101dd57600080fd5b506100c373ffffffffffffffffffffffffffffffffffffffff600435166024356103b6565b34801561020e57600080fd5b506100ec73ffffffffffffffffffffffffffffffffffffffff600435811690602435166103c3565b33600081815260056020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60035490565b600073ffffffffffffffffffffffffffffffffffffffff831615156102d357600080fd5b6102de3384846103fb565b50600192915050565b60008360018111156102f557fe5b6040805187815260208101869052808201859052905173ffffffffffffffffffffffffffffffffffffffff808a1692908b16917f8217aa7f086df009dfae12be84f967478edb6c67d9ee7aee798330f7714109209181900360600190a45060019695505050505050565b73ffffffffffffffffffffffffffffffffffffffff1660009081526004602052604090205490565b600073ffffffffffffffffffffffffffffffffffffffff831615156103ab57600080fd5b6102de3384846104b8565b60006102de338484610542565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260056020908152604080832093909416825291909152205490565b6000811161040857600080fd5b73ffffffffffffffffffffffffffffffffffffffff8084166000908152600560209081526040808320938616835292905220546104459082610657565b73ffffffffffffffffffffffffffffffffffffffff84811660008181526005602090815260408083209488168084529482529182902085905581519485529051929391927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6000811180156104fa575073ffffffffffffffffffffffffffffffffffffffff8084166000908152600560209081526040808320938616835292905220548111155b151561050557600080fd5b73ffffffffffffffffffffffffffffffffffffffff80841660009081526005602090815260408083209386168352929052205461044590826106d2565b600081118015610577575073ffffffffffffffffffffffffffffffffffffffff83166000908152600460205260409020548111155b151561058257600080fd5b73ffffffffffffffffffffffffffffffffffffffff83166000908152600460205260409020546105b290826106d2565b73ffffffffffffffffffffffffffffffffffffffff80851660009081526004602052604080822093909355908416815220546105ee9082610657565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526004602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000828201838110156106cb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f55494e543235365f4f564552464c4f5700000000000000000000000000000000604482015290519081900360640190fd5b9392505050565b60008282111561074357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f55494e543235365f554e444552464c4f57000000000000000000000000000000604482015290519081900360640190fd5b509003905600a165627a7a72305820a2537811af6194e66dc6c5820a045dff96816c1e5dc0dd73e8cf36b5a8839d0d0029",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x8D JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x95EA7B3 DUP2 EQ PUSH2 0x92 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xD7 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0xFE JUMPI DUP1 PUSH4 0x39E06361 EQ PUSH2 0x12F JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x172 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x1A0 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x1D1 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x202 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x236 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEC PUSH2 0x2A9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x2AF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD DUP2 AND SWAP1 PUSH1 0x24 CALLDATALOAD AND PUSH1 0x44 CALLDATALOAD PUSH1 0xFF PUSH1 0x64 CALLDATALOAD AND PUSH1 0x84 CALLDATALOAD PUSH1 0xA4 CALLDATALOAD PUSH2 0x2E7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x17E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEC PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH2 0x35F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x387 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x3B6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x20E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEC PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD DUP2 AND SWAP1 PUSH1 0x24 CALLDATALOAD AND PUSH2 0x3C3 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP7 SWAP1 SSTORE DUP2 MLOAD DUP7 DUP2 MSTORE SWAP2 MLOAD SWAP4 SWAP5 SWAP1 SWAP4 SWAP1 SWAP3 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP3 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND ISZERO ISZERO PUSH2 0x2D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2DE CALLER DUP5 DUP5 PUSH2 0x3FB JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x2F5 JUMPI INVALID JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP7 SWAP1 MSTORE DUP1 DUP3 ADD DUP6 SWAP1 MSTORE SWAP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP11 AND SWAP3 SWAP1 DUP12 AND SWAP2 PUSH32 0x8217AA7F086DF009DFAE12BE84F967478EDB6C67D9EE7AEE798330F771410920 SWAP2 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG4 POP PUSH1 0x1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND ISZERO ISZERO PUSH2 0x3AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2DE CALLER DUP5 DUP5 PUSH2 0x4B8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2DE CALLER DUP5 DUP5 PUSH2 0x542 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x408 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH2 0x445 SWAP1 DUP3 PUSH2 0x657 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP9 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE DUP2 MLOAD SWAP5 DUP6 MSTORE SWAP1 MLOAD SWAP3 SWAP4 SWAP2 SWAP3 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x4FA JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD DUP2 GT ISZERO JUMPDEST ISZERO ISZERO PUSH2 0x505 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH2 0x445 SWAP1 DUP3 PUSH2 0x6D2 JUMP JUMPDEST PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x577 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 GT ISZERO JUMPDEST ISZERO ISZERO PUSH2 0x582 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x5B2 SWAP1 DUP3 PUSH2 0x6D2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP5 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x5EE SWAP1 DUP3 PUSH2 0x657 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP4 SWAP3 DUP8 AND SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x6CB JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x55494E543235365F4F564552464C4F5700000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x743 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x55494E543235365F554E444552464C4F57000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 LOG2 MSTORE8 PUSH25 0x11AF6194E66DC6C5820A045DFF96816C1E5DC0DD73E8CF36B5 0xa8 DUP4 SWAP14 0xd STOP 0x29 ",
				"sourceMap": "182:10671:1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3417:202;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3417:202:1;;;;;;;;;;;;;;;;;;;;;;;;;;;5170:91;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5170:91:1;;;;;;;;;;;;;;;;;;;;4133:207;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4133:207:1;;;;;;;;;1640:1066;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1640:1066:1;;;;;;;;;;;;;;;;;;;;;;5479:106;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;5479:106:1;;;;;;;4854:207;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4854:207:1;;;;;;;;;976:139;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;976:139:1;;;;;;;;;5920:134;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;5920:134:1;;;;;;;;;;;;3417:202;3512:10;3484:4;3500:23;;;:11;:23;;;;;;;;;:32;;;;;;;;;;;:40;;;3555:36;;;;;;;3484:4;;3500:32;;3512:10;;3555:36;;;;;;;;-1:-1:-1;3608:4:1;3417:202;;;;:::o;5170:91::-;5242:12;;5170:91;:::o;4133:207::-;4210:4;4234:21;;;;;4226:30;;;;;;4266:46;4285:10;4297:7;4306:5;4266:18;:46::i;:::-;-1:-1:-1;4329:4:1;4133:207;;;;:::o;1640:1066::-;1832:4;1876;1857:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2695:4:1;1640:1066;;;;;;;;:::o;5479:106::-;5562:16;;5536:7;5562:16;;;:9;:16;;;;;;;5479:106::o;4854:207::-;4931:4;4955:21;;;;;4947:30;;;;;;4987:46;5006:10;5018:7;5027:5;4987:18;:46::i;976:139::-;1039:4;1055:32;1065:10;1077:2;1081:5;1055:9;:32::i;5920:134::-;6020:18;;;;5994:7;6020:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;5920:134::o;7951:270::-;8061:1;8053:9;;8045:18;;;;;;8111;;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;8103:43;;8140:5;8103:7;:43::i;:::-;8073:18;;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:73;;;8161:53;;;;;;;8073:27;;:18;;8161:53;;;;;;;;;;7951:270;;;:::o;8738:310::-;8848:1;8840:5;:9;:49;;;;-1:-1:-1;8862:18:1;;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;8853:36;;;8840:49;8832:58;;;;;;;;8938:18;;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;8930:43;;8967:5;8930:7;:43::i;7148:286::-;7243:1;7235:5;:9;:37;;;;-1:-1:-1;7257:15:1;;;;;;;:9;:15;;;;;;7248:24;;;7235:37;7227:46;;;;;;;;7309:15;;;;;;;:9;:15;;;;;;7301:31;;7326:5;7301:7;:31::i;:::-;7283:15;;;;;;;;:9;:15;;;;;;:49;;;;7366:13;;;;;;;7358:29;;7381:5;7358:7;:29::i;:::-;7342:13;;;;;;;;:9;:13;;;;;;;;;:45;;;;7402:25;;;;;;;7342:13;;7402:25;;;;;;;;;;;;;7148:286;;;:::o;717:230:4:-;803:7;838:5;;;874:6;;;;853:69;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;939:1;717:230;-1:-1:-1;;;717:230:4:o;503:208::-;589:7;633:6;;;;612:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;699:5:4;;;503:208::o"
			}
		}
	},
	"sources": {
		"src/BitDexToken.sol": {
			"id": 1
		},
		"@0x/contracts-utils/contracts/src/LibBytes.sol": {
			"id": 3
		},
		"@0x/contracts-utils/contracts/src/SafeMath.sol": {
			"id": 4
		},
		"src/interfaces/IBitDexToken.sol": {
			"id": 2
		}
	},
	"sourceCodes": {
		"src/BitDexToken.sol": "pragma solidity ^0.4.24;\n\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"@0x/contracts-utils/contracts/src/SafeMath.sol\";\nimport \"./interfaces/IBitDexToken.sol\";\n\n\ncontract BitDexToken is IBitDexToken, SafeMath {\n    using LibBytes for bytes;\n\n    // EVENTS\n\n    event Verify0x(\n        address indexed from,\n        address indexed to,\n        Side indexed side,\n        uint256 value,\n        int256 pnl,\n        uint256 timeLock        \n    );\n\n    // PUBLIC FUNCTIONS\n\n    constructor() public {\n        _timeToLive = block.timestamp + 14 days;\n        _totalSupply = INITIAL_SUPPLY;\n        _balances[msg.sender] = _totalSupply;\n        emit Transfer(address(0), msg.sender, _totalSupply);\n    }\n\n    /// @dev Sends `value` amount of tokens to account `to` from account `msg.sender`.\n    /// @param to The address of the tokens recipient.\n    /// @param value The amount of tokens to be transferred.\n    /// @return True if transfer was successful.\n    function transfer(address to, uint256 value) external returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /// @dev Sends `value` amount of tokens to account `to` from account `from` if enough amount of\n    /// tokens are approved by account `from` to spend by account `msg.sender`.\n    /// @param from The address of the tokens sender.\n    /// @param to The address of the tokens recipient.\n    /// @param value The amount of tokens to be transferred.\n    /// @param side TODO: Describe it.\n    /// @param pnl TODO: Describe it.\n    /// @param timeLock TODO: Describe it.\n    /// @return True if transfer was successful.\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value,\n        Side side,\n        int256 pnl,\n        uint256 timeLock\n    )\n        external\n        returns (bool)\n    {\n        emit Verify0x(from, to, side, value, pnl, timeLock);\n\n        // TODO: Unpack\n        // TODO: Business logic\n        \n        // if (from != address(0)) {\n        //     bool signatureValid = validateSignature(from, value, side, pnl, timeLock, signature);\n        //     require(signatureValid, \"INVALID_ORDER_SIGNATURE\");\n        //     if (to != address(0)) { \n        //         changePositionOwner(from, to, value, side);\n        //     } else {\n        //         liquidatePosition(from, value, side);\n        //     }\n        // } \n        // else {\n        //     require(to != address(0), \"INVALID_OPEN_ADDRESS\");\n        //     createPosition(from, to, value, side);\n        // }\n\n        // TODO: Change this standard logic\n        //_decreaseAllowance(from, msg.sender, value);\n        //_transfer(from, to, value);\n        return true;\n    }\n\n    /// @dev Approves account with address `spender` to spend `value` amount of tokens on behalf of account `msg.sender`.\n    /// Beware that changing an allowance with this method brings the risk that someone may use both the old\n    /// and the new allowance by an unfortunate transaction ordering. One possible solution to mitigate this\n    /// rare condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n    /// https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    /// @param spender Address which will be allowed to spend the tokens.\n    /// @param value Amount of tokens to allow to be spent.\n    /// @return True if approve was successful.\n    function approve(address spender, uint256 value) external returns (bool) {\n        _allowances[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /// @dev Increases the amount of tokens that account `msg.sender` allowed to spend by account `spender`.\n    /// Method approve() should be called when _allowances[spender] == 0. To decrement allowance\n    /// it is better to use this function to avoid 2 calls (and waiting until the first transaction is mined).\n    /// @param spender The address from which the tokens can be spent.\n    /// @param value The amount of tokens to increase the allowance by.\n    /// @return True if approve was successful.\n    function increaseAllowance(address spender, uint256 value) external returns (bool) {\n        require(spender != address(0));\n        _increaseAllowance(msg.sender, spender, value);\n        return true;\n    }\n\n    /// @dev Decreases the amount of tokens that account `msg.sender` allowed to spend by account `spender`.\n    /// Method approve() should be called when _allowances[spender] == 0. To decrement allowance\n    /// it is better to use this function to avoid 2 calls (and waiting until the first transaction is mined).\n    /// @param spender The address from which the tokens can be spent.\n    /// @param value The amount of tokens to decrease the allowance by.\n    /// @return True if approve was successful.\n    function decreaseAllowance(address spender, uint256 value) external returns (bool) {\n        require(spender != address(0));\n        _decreaseAllowance(msg.sender, spender, value);\n        return true;\n    }\n\n    /// @dev Returns total amount of supplied tokens.\n    /// @return Total amount of supplied tokens.\n    function totalSupply() external view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /// @dev Returns the balance of account with address `owner`.\n    /// @param owner The address from which the balance will be retrieved.\n    /// @return Amount of tokens hold by account with address `owner`.\n    function balanceOf(address owner) external view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /// @dev Returns the amount of tokens hold by account `owner` and approved to spend by account `spender`.\n    /// @param owner The address of the account owning tokens.\n    /// @param spender The address of the account able to transfer the tokens owning by account `owner`.\n    /// @return Amount of tokens allowed to spend.\n    function allowance(address owner, address spender) external view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n    \n    // TODO:\n    // function changePositionOwner\n    // function liquidatePosition\n    // function createPosition \n\n    // INTERNAL FUNCTIONS\n\n    function validateSignature(\n        address from,\n        uint256 value,\n        Side side,\n        int256 pnl,\n        uint256 timeLock,\n        bytes signature\n    )\n        internal\n        pure\n        returns (bool)\n    {\n        require(signature.length == 65, \"INVALID_ORDER_SIGNATURE_LENGTH\");\n        uint8 v = uint8(signature[0]);\n        bytes32 r = signature.readBytes32(1);\n        bytes32 s = signature.readBytes32(33);\n        bytes memory data = abi.encodePacked(from, value, side, pnl, timeLock);\n        bytes32 dataHash = keccak256(data);\n        address recovered = ecrecover(dataHash, v, r, s);\n        return true/*signerAddress == recovered*/;\n    }\n\n    /// @dev Transfers tokens from account with address `from` to account with address `to`.\n    /// @param from The address of the tokens sender.\n    /// @param to The address of the tokens recipient.\n    /// @param value The amount of tokens to be transferred.\n    function _transfer(address from, address to, uint256 value) internal {\n        require(value > 0 && value <= _balances[from]);\n        _balances[from] = safeSub(_balances[from], value);\n        _balances[to] = safeAdd(_balances[to], value);\n        emit Transfer(from, to, value);\n    }\n\n    /// @dev Increases the amount of tokens that account `owner` allowed to spend by account `spender`.\n    /// Method approve() should be called when _allowances[spender] == 0. To decrement allowance\n    /// it is better to use this function to avoid 2 calls (and waiting until the first transaction is mined).\n    /// @param owner The address which owns the tokens.\n    /// @param spender The address from which the tokens can be spent.\n    /// @param value The amount of tokens to increase the allowance by.\n    function _increaseAllowance(address owner, address spender, uint256 value) internal {\n        require(value > 0);\n        _allowances[owner][spender] = safeAdd(_allowances[owner][spender], value);\n        emit Approval(owner, spender, _allowances[owner][spender]);\n    }\n\n    /// @dev Decreases the amount of tokens that account `owner` allowed to spend by account `spender`.\n    /// Method approve() should be called when _allowances[spender] == 0. To decrement allowance\n    /// it is better to use this function to avoid 2 calls (and waiting until the first transaction is mined).\n    /// @param owner The address which owns the tokens.\n    /// @param spender The address from which the tokens can be spent.\n    /// @param value The amount of tokens to decrease the allowance by.\n    function _decreaseAllowance(address owner, address spender, uint256 value) internal {\n        require(value > 0 && value <= _allowances[owner][spender]);\n        _allowances[owner][spender] = safeSub(_allowances[owner][spender], value);\n        emit Approval(owner, spender, _allowances[owner][spender]);\n    }\n\n    /// @dev Internal function that mints specified amount of tokens and assigns it to account `receiver`.\n    /// This encapsulates the modification of balances such that the proper events are emitted.\n    /// @param receiver The address that will receive the minted tokens.\n    /// @param value The amount of tokens that will be minted.\n    function _mint(address receiver, uint256 value) internal {\n        require(receiver != address(0));\n        require(value > 0);\n        _balances[receiver] = safeAdd(_balances[receiver], value);\n        _totalSupply = safeAdd(_totalSupply, value);\n        emit Transfer(address(0), receiver, value);\n    }\n\n    /// @dev Internal function that burns specified amount of tokens of a given address.\n    /// @param burner The address from which tokens will be burnt.\n    /// @param value The amount of tokens that will be burnt.\n    function _burn(address burner, uint256 value) internal {\n        require(burner != address(0));\n        require(value > 0 && value <= _balances[burner]);\n        _balances[burner] = safeSub(_balances[burner], value);\n        _totalSupply = safeSub(_totalSupply, value);\n        emit Transfer(burner, address(0), value);\n    }\n\n    // FIELDS\n\n    // Mapping of address => address => amount of open contracts\n    mapping (address => mapping (address => uint256)) internal _openContracts;\n\n    // Mapping of address => side of open short positions\n    mapping (address => Side) internal _sides;\n\n    uint256 internal _timeToLive;\n\n    uint256 internal _totalSupply;\n    mapping (address => uint256) internal _balances;\n    mapping (address => mapping (address => uint256)) internal _allowances;\n\n    // Amount of initially supplied tokens is constant and equals to 1,000,000,000\n    uint256 private constant INITIAL_SUPPLY = 10**27;\n}\n",
		"@0x/contracts-utils/contracts/src/LibBytes.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\n\nlibrary LibBytes {\n\n    using LibBytes for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n    \n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n                    \n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n                    \n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        require(\n            from <= to,\n            \"FROM_LESS_THAN_TO_REQUIRED\"\n        );\n        require(\n            to < b.length,\n            \"TO_LESS_THAN_LENGTH_REQUIRED\"\n        );\n        \n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n    \n    /// @dev Returns a slice from a byte array without preserving the input.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    /// @dev When `from == 0`, the original array will match the slice. In other cases its state will be corrupted.\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        require(\n            from <= to,\n            \"FROM_LESS_THAN_TO_REQUIRED\"\n        );\n        require(\n            to < b.length,\n            \"TO_LESS_THAN_LENGTH_REQUIRED\"\n        );\n        \n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        require(\n            b.length > 0,\n            \"GREATER_THAN_ZERO_LENGTH_REQUIRED\"\n        );\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Pops the last 20 bytes off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The 20 byte address that was popped off.\n    function popLast20Bytes(bytes memory b)\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= 20,\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\n        );\n\n        // Store last 20 bytes.\n        result = readAddress(b, b.length - 20);\n\n        assembly {\n            // Subtract 20 from byte array length.\n            let newLen := sub(mload(b), 20)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n            \n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        require(\n            b.length >= index + 32,\n            \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\"\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 32,\n            \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\"\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        require(\n            b.length >= index + 4,\n            \"GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED\"\n        );\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Reads nested bytes from a specific position.\n    /// @dev NOTE: the returned value overlaps with the input value.\n    ///            Both should be treated as immutable.\n    /// @param b Byte array containing nested bytes.\n    /// @param index Index of nested bytes.\n    /// @return result Nested bytes.\n    function readBytesWithLength(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Read length of nested bytes\n        uint256 nestedBytesLength = readUint256(b, index);\n        index += 32;\n\n        // Assert length of <b> is valid, given\n        // length of nested bytes\n        require(\n            b.length >= index + nestedBytesLength,\n            \"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\"\n        );\n        \n        // Return a pointer to the byte array as it exists inside `b`\n        assembly {\n            result := add(b, index)\n        }\n        return result;\n    }\n\n    /// @dev Inserts bytes at a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes to insert.\n    function writeBytesWithLength(\n        bytes memory b,\n        uint256 index,\n        bytes memory input\n    )\n        internal\n        pure\n    {\n        // Assert length of <b> is valid, given\n        // length of input\n        require(\n            b.length >= index + 32 + input.length,  // 32 bytes to store length\n            \"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\"\n        );\n\n        // Copy <input> into <b>\n        memCopy(\n            b.contentAddress() + index,\n            input.rawAddress(), // includes length of <input>\n            input.length + 32   // +32 bytes to store <input> length\n        );\n    }\n\n    /// @dev Performs a deep copy of a byte array onto another byte array of greater than or equal length.\n    /// @param dest Byte array that will be overwritten with source bytes.\n    /// @param source Byte array to copy onto dest bytes.\n    function deepCopyBytes(\n        bytes memory dest,\n        bytes memory source\n    )\n        internal\n        pure\n    {\n        uint256 sourceLen = source.length;\n        // Dest length must be >= source length, or some bytes would not be copied.\n        require(\n            dest.length >= sourceLen,\n            \"GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED\"\n        );\n        memCopy(\n            dest.contentAddress(),\n            source.contentAddress(),\n            sourceLen\n        );\n    }\n}\n",
		"@0x/contracts-utils/contracts/src/SafeMath.sol": "pragma solidity ^0.4.24;\n\n\ncontract SafeMath {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(\n            c / a == b,\n            \"UINT256_OVERFLOW\"\n        );\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        require(\n            b <= a,\n            \"UINT256_UNDERFLOW\"\n        );\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        require(\n            c >= a,\n            \"UINT256_OVERFLOW\"\n        );\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}\n",
		"src/interfaces/IBitDexToken.sol": "pragma solidity ^0.4.24;\n\n\ncontract IBitDexToken {\n\n    enum Side {\n        SHORT, // Also means 'SELL'\n        LONG   // Also means 'BUY'\n    }\n\n    /// @dev Emits when ownership of any tokens changes by any mechanism.\n    /// This event also emits when tokens are created (`from` == 0) and destroyed (`to` == 0).\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    \n    /// @dev Emits when the approved address for a tokens is changed or reaffirmed.\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /// @dev Sends `value` amount of tokens to account `to` from account `msg.sender`.\n    /// @param to The address of the tokens recipient.\n    /// @param value The amount of tokens to be transferred.\n    /// @return True if transfer was successful.\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /// @dev Sends `value` amount of tokens to account `to` from account `from` if enough amount of\n    /// tokens are approved by account `from` to spend by account `msg.sender`.\n    /// @param from The address of the tokens sender.\n    /// @param to The address of the tokens recipient.\n    /// @param value The amount of tokens to be transferred.\n    /// @param side TODO: Describe it.\n    /// @param pnl TODO: Describe it.\n    /// @param timeLock TODO: Describe it.\n    /// @return True if transfer was successful.\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value,\n        Side side,\n        int256 pnl,\n        uint256 timeLock\n    )\n        external\n        returns (bool);\n    \n    /// @dev Approves account `spender` by account `msg.sender` to spend `value` amount of tokens.\n    /// @param spender The address of the account able to transfer the tokens.\n    /// @param value The new amount of tokens to be approved for transfer.\n    /// @return True if approve was successful.\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /// @dev Returns total amount of supplied tokens.\n    /// @return Total amount of supplied tokens.\n    function totalSupply() external view returns (uint256);\n    \n    /// @dev Returns the balance of account with address `owner`.\n    /// @param owner The address from which the balance will be retrieved.\n    /// @return Amount of tokens hold by account with address `owner`.\n    function balanceOf(address owner) external view returns (uint256);\n\n    /// @dev Returns the amount of tokens hold by account `owner` and approved to spend by account `spender`.\n    /// @param owner The address of the account owning tokens.\n    /// @param spender The address of the account able to transfer the tokens owning by account `owner`.\n    /// @return Amount of tokens allowed to spend.\n    function allowance(address owner, address spender) external view returns (uint256);\n}\n"
	},
	"sourceTreeHashHex": "0xdd17a60d6391ecb8b10498bfa7fac0172d6f49872aecc372ba65aef833df5887",
	"compiler": {
		"name": "solc",
		"version": "0.4.25+commit.59dbf8f1.Linux.g++",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 1000000
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			},
			"remappings": [
				"@0x/contracts-utils=/Users/wardencliffe/Documents/Projects/Personal/0x-monorepo-mirror/node_modules/@0x/contracts-utils"
			]
		}
	},
	"networks": {}
}